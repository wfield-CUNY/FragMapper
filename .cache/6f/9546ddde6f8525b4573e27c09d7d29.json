{"id":"node_modules/cesium/Source/Shaders/ModelExperimental/LightingStageFS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"vec3 LINEARtoSRGB(vec3 linearIn) \\n\\\n{\\n\\\n    #ifndef HDR \\n\\\n    return pow(linearIn, vec3(1.0/2.2));\\n\\\n    #else \\n\\\n    return linearIn;\\n\\\n    #endif \\n\\\n}\\n\\\n\\n\\\n#ifdef LIGHTING_PBR\\n\\\nvec3 applyTonemapping(vec3 linearIn) \\n\\\n{\\n\\\n    #ifndef HDR \\n\\\n    return czm_acesTonemapping(linearIn);\\n\\\n    #else \\n\\\n    return linearIn;\\n\\\n    #endif \\n\\\n}\\n\\\n\\n\\\nvec3 computePbrLighting(czm_modelMaterial inputMaterial)\\n\\\n{\\n\\\n    czm_pbrParameters pbrParameters;\\n\\\n    pbrParameters.diffuseColor = inputMaterial.diffuse;\\n\\\n    pbrParameters.f0 = inputMaterial.specular;\\n\\\n    pbrParameters.roughness = inputMaterial.roughness;\\n\\\n    \\n\\\n    vec3 lightColorHdr = czm_lightColorHdr;\\n\\\n\\n\\\n    vec3 color = inputMaterial.diffuse;\\n\\\n    #ifdef HAS_NORMALS\\n\\\n    color = czm_pbrLighting(\\n\\\n        v_positionEC,\\n\\\n        inputMaterial.normalEC,\\n\\\n        czm_lightDirectionEC,\\n\\\n        lightColorHdr,\\n\\\n        pbrParameters\\n\\\n    );\\n\\\n    #endif\\n\\\n\\n\\\n    color *= inputMaterial.occlusion;\\n\\\n    color += inputMaterial.emissive;\\n\\\n\\n\\\n    // Convert high-dynamic range to low-dynamic range in HDR mode\\n\\\n    color = applyTonemapping(color);\\n\\\n    return color;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid lightingStage(inout czm_modelMaterial material)\\n\\\n{\\n\\\n    // Even though the lighting will only set the diffuse color,\\n\\\n    // pass all other properties so further stages have access to them.\\n\\\n    vec3 color = vec3(0.0);\\n\\\n\\n\\\n    #ifdef LIGHTING_PBR\\n\\\n    color = computePbrLighting(material);\\n\\\n    #else // unlit\\n\\\n    color = material.diffuse;\\n\\\n    #endif\\n\\\n\\n\\\n    color = LINEARtoSRGB(color);\\n\\\n\\n\\\n    material.diffuse = color;\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/LightingStageFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/LightingStageFS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/ModelExperimental/LightingStageFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"vec3 LINEARtoSRGB(vec3 linearIn) \\n\\\n{\\n\\\n    #ifndef HDR \\n\\\n    return pow(linearIn, vec3(1.0/2.2));\\n\\\n    #else \\n\\\n    return linearIn;\\n\\\n    #endif \\n\\\n}\\n\\\n\\n\\\n#ifdef LIGHTING_PBR\\n\\\nvec3 applyTonemapping(vec3 linearIn) \\n\\\n{\\n\\\n    #ifndef HDR \\n\\\n    return czm_acesTonemapping(linearIn);\\n\\\n    #else \\n\\\n    return linearIn;\\n\\\n    #endif \\n\\\n}\\n\\\n\\n\\\nvec3 computePbrLighting(czm_modelMaterial inputMaterial)\\n\\\n{\\n\\\n    czm_pbrParameters pbrParameters;\\n\\\n    pbrParameters.diffuseColor = inputMaterial.diffuse;\\n\\\n    pbrParameters.f0 = inputMaterial.specular;\\n\\\n    pbrParameters.roughness = inputMaterial.roughness;\\n\\\n    \\n\\\n    vec3 lightColorHdr = czm_lightColorHdr;\\n\\\n\\n\\\n    vec3 color = inputMaterial.diffuse;\\n\\\n    #ifdef HAS_NORMALS\\n\\\n    color = czm_pbrLighting(\\n\\\n        v_positionEC,\\n\\\n        inputMaterial.normalEC,\\n\\\n        czm_lightDirectionEC,\\n\\\n        lightColorHdr,\\n\\\n        pbrParameters\\n\\\n    );\\n\\\n    #endif\\n\\\n\\n\\\n    color *= inputMaterial.occlusion;\\n\\\n    color += inputMaterial.emissive;\\n\\\n\\n\\\n    // Convert high-dynamic range to low-dynamic range in HDR mode\\n\\\n    color = applyTonemapping(color);\\n\\\n    return color;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid lightingStage(inout czm_modelMaterial material)\\n\\\n{\\n\\\n    // Even though the lighting will only set the diffuse color,\\n\\\n    // pass all other properties so further stages have access to them.\\n\\\n    vec3 color = vec3(0.0);\\n\\\n\\n\\\n    #ifdef LIGHTING_PBR\\n\\\n    color = computePbrLighting(material);\\n\\\n    #else // unlit\\n\\\n    color = material.diffuse;\\n\\\n    #endif\\n\\\n\\n\\\n    color = LINEARtoSRGB(color);\\n\\\n\\n\\\n    material.diffuse = color;\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"4a426deef097748e0a8af83fb364be20","cacheData":{"env":{}}}