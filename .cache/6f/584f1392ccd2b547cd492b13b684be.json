{"id":"node_modules/cesium/Source/Shaders/PolylineShadowVolumeMorphVS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\n\\n\\\nattribute vec4 startHiAndForwardOffsetX;\\n\\\nattribute vec4 startLoAndForwardOffsetY;\\n\\\nattribute vec4 startNormalAndForwardOffsetZ;\\n\\\nattribute vec4 endNormalAndTextureCoordinateNormalizationX;\\n\\\nattribute vec4 rightNormalAndTextureCoordinateNormalizationY;\\n\\\nattribute vec4 startHiLo2D;\\n\\\nattribute vec4 offsetAndRight2D;\\n\\\nattribute vec4 startEndNormals2D;\\n\\\nattribute vec2 texcoordNormalization2D;\\n\\\n\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_forwardDirectionEC;\\n\\\nvarying vec3 v_texcoordNormalizationAndHalfWidth;\\n\\\nvarying float v_batchId;\\n\\\n\\n\\\n// For materials\\n\\\n#ifdef WIDTH_VARYING\\n\\\nvarying float v_width;\\n\\\n#endif\\n\\\n#ifdef ANGLE_VARYING\\n\\\nvarying float v_polylineAngle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#else\\n\\\nvarying vec2 v_alignedPlaneDistances;\\n\\\nvarying float v_texcoordT;\\n\\\n#endif\\n\\\n\\n\\\n// Morphing planes using SLERP or NLERP doesn't seem to work, so instead draw the material directly on the shadow volume.\\n\\\n// Morph views are from very far away and aren't meant to be used precisely, so this should be sufficient.\\n\\\nvoid main()\\n\\\n{\\n\\\n    v_batchId = batchId;\\n\\\n\\n\\\n    // Start position\\n\\\n    vec4 posRelativeToEye2D = czm_translateRelativeToEye(vec3(0.0, startHiLo2D.xy), vec3(0.0, startHiLo2D.zw));\\n\\\n    vec4 posRelativeToEye3D = czm_translateRelativeToEye(startHiAndForwardOffsetX.xyz, startLoAndForwardOffsetY.xyz);\\n\\\n    vec4 posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\\n\\\n    vec3 posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\\n\\\n    vec3 posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\\n\\\n    vec3 startEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\\n\\\n\\n\\\n    // Start plane\\n\\\n    vec4 startPlane2D;\\n\\\n    vec4 startPlane3D;\\n\\\n    startPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.xy);\\n\\\n    startPlane3D.xyz = czm_normal * startNormalAndForwardOffsetZ.xyz;\\n\\\n    startPlane2D.w = -dot(startPlane2D.xyz, posEc2D);\\n\\\n    startPlane3D.w = -dot(startPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // Right plane\\n\\\n    vec4 rightPlane2D;\\n\\\n    vec4 rightPlane3D;\\n\\\n    rightPlane2D.xyz = czm_normal * vec3(0.0, offsetAndRight2D.zw);\\n\\\n    rightPlane3D.xyz = czm_normal * rightNormalAndTextureCoordinateNormalizationY.xyz;\\n\\\n    rightPlane2D.w = -dot(rightPlane2D.xyz, posEc2D);\\n\\\n    rightPlane3D.w = -dot(rightPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // End position\\n\\\n    posRelativeToEye2D = posRelativeToEye2D + vec4(0.0, offsetAndRight2D.xy, 0.0);\\n\\\n    posRelativeToEye3D = posRelativeToEye3D + vec4(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w, 0.0);\\n\\\n    posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\\n\\\n    posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\\n\\\n    posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\\n\\\n    vec3 endEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\\n\\\n    vec3 forwardEc3D = czm_normal * normalize(vec3(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w));\\n\\\n    vec3 forwardEc2D = czm_normal * normalize(vec3(0.0, offsetAndRight2D.xy));\\n\\\n\\n\\\n    // End plane\\n\\\n    vec4 endPlane2D;\\n\\\n    vec4 endPlane3D;\\n\\\n    endPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.zw);\\n\\\n    endPlane3D.xyz = czm_normal * endNormalAndTextureCoordinateNormalizationX.xyz;\\n\\\n    endPlane2D.w = -dot(endPlane2D.xyz, posEc2D);\\n\\\n    endPlane3D.w = -dot(endPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // Forward direction\\n\\\n    v_forwardDirectionEC = normalize(endEC - startEC);\\n\\\n\\n\\\n    vec2 cleanTexcoordNormalization2D;\\n\\\n    cleanTexcoordNormalization2D.x = abs(texcoordNormalization2D.x);\\n\\\n    cleanTexcoordNormalization2D.y = czm_branchFreeTernary(texcoordNormalization2D.y > 1.0, 0.0, abs(texcoordNormalization2D.y));\\n\\\n    vec2 cleanTexcoordNormalization3D;\\n\\\n    cleanTexcoordNormalization3D.x = abs(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n    cleanTexcoordNormalization3D.y = rightNormalAndTextureCoordinateNormalizationY.w;\\n\\\n    cleanTexcoordNormalization3D.y = czm_branchFreeTernary(cleanTexcoordNormalization3D.y > 1.0, 0.0, abs(cleanTexcoordNormalization3D.y));\\n\\\n\\n\\\n    v_texcoordNormalizationAndHalfWidth.xy = mix(cleanTexcoordNormalization2D, cleanTexcoordNormalization3D, czm_morphTime);\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n    v_color = czm_batchTable_color(batchId);\\n\\\n#else // PER_INSTANCE_COLOR\\n\\\n    // For computing texture coordinates\\n\\\n\\n\\\n    v_alignedPlaneDistances.x = -dot(v_forwardDirectionEC, startEC);\\n\\\n    v_alignedPlaneDistances.y = -dot(-v_forwardDirectionEC, endEC);\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n\\n\\\n#ifdef WIDTH_VARYING\\n\\\n    float width = czm_batchTable_width(batchId);\\n\\\n    float halfWidth = width * 0.5;\\n\\\n    v_width = width;\\n\\\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\\n\\\n#else\\n\\\n    float halfWidth = 0.5 * czm_batchTable_width(batchId);\\n\\\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\\n\\\n#endif\\n\\\n\\n\\\n    // Compute a normal along which to \\\"push\\\" the position out, extending the miter depending on view distance.\\n\\\n    // Position has already been \\\"pushed\\\" by unit length along miter normal, and miter normals are encoded in the planes.\\n\\\n    // Decode the normal to use at this specific vertex, push the position back, and then push to where it needs to be.\\n\\\n    // Since this is morphing, compute both 3D and 2D positions and then blend.\\n\\\n\\n\\\n    // ****** 3D ******\\n\\\n    // Check distance to the end plane and start plane, pick the plane that is closer\\n\\\n    vec4 positionEc3D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position3DHigh, position3DLow); // w = 1.0, see czm_computePosition\\n\\\n    float absStartPlaneDistance = abs(czm_planeDistance(startPlane3D, positionEc3D.xyz));\\n\\\n    float absEndPlaneDistance = abs(czm_planeDistance(endPlane3D, positionEc3D.xyz));\\n\\\n    vec3 planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane3D.xyz, endPlane3D.xyz);\\n\\\n    vec3 upOrDown = normalize(cross(rightPlane3D.xyz, planeDirection)); // Points \\\"up\\\" for start plane, \\\"down\\\" at end plane.\\n\\\n    vec3 normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\\n\\\n\\n\\\n    // Nudge the top vertex upwards to prevent flickering\\n\\\n    vec3 geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc3D));\\n\\\n    geodeticSurfaceNormal *= float(0.0 <= rightNormalAndTextureCoordinateNormalizationY.w && rightNormalAndTextureCoordinateNormalizationY.w <= 1.0);\\n\\\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\\n\\\n    positionEc3D.xyz += geodeticSurfaceNormal;\\n\\\n\\n\\\n    // Determine if this vertex is on the \\\"left\\\" or \\\"right\\\"\\n\\\n    normalEC *= sign(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n\\n\\\n    // A \\\"perfect\\\" implementation would push along normals according to the angle against forward.\\n\\\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\\n\\\n    positionEc3D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc3D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\\n\\\n\\n\\\n    // ****** 2D ******\\n\\\n    // Check distance to the end plane and start plane, pick the plane that is closer\\n\\\n    vec4 positionEc2D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy); // w = 1.0, see czm_computePosition\\n\\\n    absStartPlaneDistance = abs(czm_planeDistance(startPlane2D, positionEc2D.xyz));\\n\\\n    absEndPlaneDistance = abs(czm_planeDistance(endPlane2D, positionEc2D.xyz));\\n\\\n    planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane2D.xyz, endPlane2D.xyz);\\n\\\n    upOrDown = normalize(cross(rightPlane2D.xyz, planeDirection)); // Points \\\"up\\\" for start plane, \\\"down\\\" at end plane.\\n\\\n    normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\\n\\\n\\n\\\n    // Nudge the top vertex upwards to prevent flickering\\n\\\n    geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc2D));\\n\\\n    geodeticSurfaceNormal *= float(0.0 <= texcoordNormalization2D.y && texcoordNormalization2D.y <= 1.0);\\n\\\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\\n\\\n    positionEc2D.xyz += geodeticSurfaceNormal;\\n\\\n\\n\\\n    // Determine if this vertex is on the \\\"left\\\" or \\\"right\\\"\\n\\\n    normalEC *= sign(texcoordNormalization2D.x);\\n\\\n#ifndef PER_INSTANCE_COLOR\\n\\\n    // Use vertex's sidedness to compute its texture coordinate.\\n\\\n    v_texcoordT = clamp(sign(texcoordNormalization2D.x), 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    // A \\\"perfect\\\" implementation would push along normals according to the angle against forward.\\n\\\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\\n\\\n    positionEc2D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc2D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\\n\\\n\\n\\\n    // Blend for actual position\\n\\\n    gl_Position = czm_projection * mix(positionEc2D, positionEc3D, czm_morphTime);\\n\\\n\\n\\\n#ifdef ANGLE_VARYING\\n\\\n    // Approximate relative screen space direction of the line.\\n\\\n    vec2 approxLineDirection = normalize(vec2(v_forwardDirectionEC.x, -v_forwardDirectionEC.y));\\n\\\n    approxLineDirection.y = czm_branchFreeTernary(approxLineDirection.x == 0.0 && approxLineDirection.y == 0.0, -1.0, approxLineDirection.y);\\n\\\n    v_polylineAngle = czm_fastApproximateAtan(approxLineDirection.x, approxLineDirection.y);\\n\\\n#endif\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/PolylineShadowVolumeMorphVS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/PolylineShadowVolumeMorphVS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/PolylineShadowVolumeMorphVS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"attribute vec3 position3DHigh;\\n\\\nattribute vec3 position3DLow;\\n\\\n\\n\\\nattribute vec4 startHiAndForwardOffsetX;\\n\\\nattribute vec4 startLoAndForwardOffsetY;\\n\\\nattribute vec4 startNormalAndForwardOffsetZ;\\n\\\nattribute vec4 endNormalAndTextureCoordinateNormalizationX;\\n\\\nattribute vec4 rightNormalAndTextureCoordinateNormalizationY;\\n\\\nattribute vec4 startHiLo2D;\\n\\\nattribute vec4 offsetAndRight2D;\\n\\\nattribute vec4 startEndNormals2D;\\n\\\nattribute vec2 texcoordNormalization2D;\\n\\\n\\n\\\nattribute float batchId;\\n\\\n\\n\\\nvarying vec3 v_forwardDirectionEC;\\n\\\nvarying vec3 v_texcoordNormalizationAndHalfWidth;\\n\\\nvarying float v_batchId;\\n\\\n\\n\\\n// For materials\\n\\\n#ifdef WIDTH_VARYING\\n\\\nvarying float v_width;\\n\\\n#endif\\n\\\n#ifdef ANGLE_VARYING\\n\\\nvarying float v_polylineAngle;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\nvarying vec4 v_color;\\n\\\n#else\\n\\\nvarying vec2 v_alignedPlaneDistances;\\n\\\nvarying float v_texcoordT;\\n\\\n#endif\\n\\\n\\n\\\n// Morphing planes using SLERP or NLERP doesn't seem to work, so instead draw the material directly on the shadow volume.\\n\\\n// Morph views are from very far away and aren't meant to be used precisely, so this should be sufficient.\\n\\\nvoid main()\\n\\\n{\\n\\\n    v_batchId = batchId;\\n\\\n\\n\\\n    // Start position\\n\\\n    vec4 posRelativeToEye2D = czm_translateRelativeToEye(vec3(0.0, startHiLo2D.xy), vec3(0.0, startHiLo2D.zw));\\n\\\n    vec4 posRelativeToEye3D = czm_translateRelativeToEye(startHiAndForwardOffsetX.xyz, startLoAndForwardOffsetY.xyz);\\n\\\n    vec4 posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\\n\\\n    vec3 posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\\n\\\n    vec3 posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\\n\\\n    vec3 startEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\\n\\\n\\n\\\n    // Start plane\\n\\\n    vec4 startPlane2D;\\n\\\n    vec4 startPlane3D;\\n\\\n    startPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.xy);\\n\\\n    startPlane3D.xyz = czm_normal * startNormalAndForwardOffsetZ.xyz;\\n\\\n    startPlane2D.w = -dot(startPlane2D.xyz, posEc2D);\\n\\\n    startPlane3D.w = -dot(startPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // Right plane\\n\\\n    vec4 rightPlane2D;\\n\\\n    vec4 rightPlane3D;\\n\\\n    rightPlane2D.xyz = czm_normal * vec3(0.0, offsetAndRight2D.zw);\\n\\\n    rightPlane3D.xyz = czm_normal * rightNormalAndTextureCoordinateNormalizationY.xyz;\\n\\\n    rightPlane2D.w = -dot(rightPlane2D.xyz, posEc2D);\\n\\\n    rightPlane3D.w = -dot(rightPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // End position\\n\\\n    posRelativeToEye2D = posRelativeToEye2D + vec4(0.0, offsetAndRight2D.xy, 0.0);\\n\\\n    posRelativeToEye3D = posRelativeToEye3D + vec4(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w, 0.0);\\n\\\n    posRelativeToEye = czm_columbusViewMorph(posRelativeToEye2D, posRelativeToEye3D, czm_morphTime);\\n\\\n    posEc2D = (czm_modelViewRelativeToEye * posRelativeToEye2D).xyz;\\n\\\n    posEc3D = (czm_modelViewRelativeToEye * posRelativeToEye3D).xyz;\\n\\\n    vec3 endEC = (czm_modelViewRelativeToEye * posRelativeToEye).xyz;\\n\\\n    vec3 forwardEc3D = czm_normal * normalize(vec3(startHiAndForwardOffsetX.w, startLoAndForwardOffsetY.w, startNormalAndForwardOffsetZ.w));\\n\\\n    vec3 forwardEc2D = czm_normal * normalize(vec3(0.0, offsetAndRight2D.xy));\\n\\\n\\n\\\n    // End plane\\n\\\n    vec4 endPlane2D;\\n\\\n    vec4 endPlane3D;\\n\\\n    endPlane2D.xyz = czm_normal * vec3(0.0, startEndNormals2D.zw);\\n\\\n    endPlane3D.xyz = czm_normal * endNormalAndTextureCoordinateNormalizationX.xyz;\\n\\\n    endPlane2D.w = -dot(endPlane2D.xyz, posEc2D);\\n\\\n    endPlane3D.w = -dot(endPlane3D.xyz, posEc3D);\\n\\\n\\n\\\n    // Forward direction\\n\\\n    v_forwardDirectionEC = normalize(endEC - startEC);\\n\\\n\\n\\\n    vec2 cleanTexcoordNormalization2D;\\n\\\n    cleanTexcoordNormalization2D.x = abs(texcoordNormalization2D.x);\\n\\\n    cleanTexcoordNormalization2D.y = czm_branchFreeTernary(texcoordNormalization2D.y > 1.0, 0.0, abs(texcoordNormalization2D.y));\\n\\\n    vec2 cleanTexcoordNormalization3D;\\n\\\n    cleanTexcoordNormalization3D.x = abs(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n    cleanTexcoordNormalization3D.y = rightNormalAndTextureCoordinateNormalizationY.w;\\n\\\n    cleanTexcoordNormalization3D.y = czm_branchFreeTernary(cleanTexcoordNormalization3D.y > 1.0, 0.0, abs(cleanTexcoordNormalization3D.y));\\n\\\n\\n\\\n    v_texcoordNormalizationAndHalfWidth.xy = mix(cleanTexcoordNormalization2D, cleanTexcoordNormalization3D, czm_morphTime);\\n\\\n\\n\\\n#ifdef PER_INSTANCE_COLOR\\n\\\n    v_color = czm_batchTable_color(batchId);\\n\\\n#else // PER_INSTANCE_COLOR\\n\\\n    // For computing texture coordinates\\n\\\n\\n\\\n    v_alignedPlaneDistances.x = -dot(v_forwardDirectionEC, startEC);\\n\\\n    v_alignedPlaneDistances.y = -dot(-v_forwardDirectionEC, endEC);\\n\\\n#endif // PER_INSTANCE_COLOR\\n\\\n\\n\\\n#ifdef WIDTH_VARYING\\n\\\n    float width = czm_batchTable_width(batchId);\\n\\\n    float halfWidth = width * 0.5;\\n\\\n    v_width = width;\\n\\\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\\n\\\n#else\\n\\\n    float halfWidth = 0.5 * czm_batchTable_width(batchId);\\n\\\n    v_texcoordNormalizationAndHalfWidth.z = halfWidth;\\n\\\n#endif\\n\\\n\\n\\\n    // Compute a normal along which to \\\"push\\\" the position out, extending the miter depending on view distance.\\n\\\n    // Position has already been \\\"pushed\\\" by unit length along miter normal, and miter normals are encoded in the planes.\\n\\\n    // Decode the normal to use at this specific vertex, push the position back, and then push to where it needs to be.\\n\\\n    // Since this is morphing, compute both 3D and 2D positions and then blend.\\n\\\n\\n\\\n    // ****** 3D ******\\n\\\n    // Check distance to the end plane and start plane, pick the plane that is closer\\n\\\n    vec4 positionEc3D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position3DHigh, position3DLow); // w = 1.0, see czm_computePosition\\n\\\n    float absStartPlaneDistance = abs(czm_planeDistance(startPlane3D, positionEc3D.xyz));\\n\\\n    float absEndPlaneDistance = abs(czm_planeDistance(endPlane3D, positionEc3D.xyz));\\n\\\n    vec3 planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane3D.xyz, endPlane3D.xyz);\\n\\\n    vec3 upOrDown = normalize(cross(rightPlane3D.xyz, planeDirection)); // Points \\\"up\\\" for start plane, \\\"down\\\" at end plane.\\n\\\n    vec3 normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\\n\\\n\\n\\\n    // Nudge the top vertex upwards to prevent flickering\\n\\\n    vec3 geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc3D));\\n\\\n    geodeticSurfaceNormal *= float(0.0 <= rightNormalAndTextureCoordinateNormalizationY.w && rightNormalAndTextureCoordinateNormalizationY.w <= 1.0);\\n\\\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\\n\\\n    positionEc3D.xyz += geodeticSurfaceNormal;\\n\\\n\\n\\\n    // Determine if this vertex is on the \\\"left\\\" or \\\"right\\\"\\n\\\n    normalEC *= sign(endNormalAndTextureCoordinateNormalizationX.w);\\n\\\n\\n\\\n    // A \\\"perfect\\\" implementation would push along normals according to the angle against forward.\\n\\\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\\n\\\n    positionEc3D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc3D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\\n\\\n\\n\\\n    // ****** 2D ******\\n\\\n    // Check distance to the end plane and start plane, pick the plane that is closer\\n\\\n    vec4 positionEc2D = czm_modelViewRelativeToEye * czm_translateRelativeToEye(position2DHigh.zxy, position2DLow.zxy); // w = 1.0, see czm_computePosition\\n\\\n    absStartPlaneDistance = abs(czm_planeDistance(startPlane2D, positionEc2D.xyz));\\n\\\n    absEndPlaneDistance = abs(czm_planeDistance(endPlane2D, positionEc2D.xyz));\\n\\\n    planeDirection = czm_branchFreeTernary(absStartPlaneDistance < absEndPlaneDistance, startPlane2D.xyz, endPlane2D.xyz);\\n\\\n    upOrDown = normalize(cross(rightPlane2D.xyz, planeDirection)); // Points \\\"up\\\" for start plane, \\\"down\\\" at end plane.\\n\\\n    normalEC = normalize(cross(planeDirection, upOrDown));         // In practice, the opposite seems to work too.\\n\\\n\\n\\\n    // Nudge the top vertex upwards to prevent flickering\\n\\\n    geodeticSurfaceNormal = normalize(cross(normalEC, forwardEc2D));\\n\\\n    geodeticSurfaceNormal *= float(0.0 <= texcoordNormalization2D.y && texcoordNormalization2D.y <= 1.0);\\n\\\n    geodeticSurfaceNormal *= MAX_TERRAIN_HEIGHT;\\n\\\n    positionEc2D.xyz += geodeticSurfaceNormal;\\n\\\n\\n\\\n    // Determine if this vertex is on the \\\"left\\\" or \\\"right\\\"\\n\\\n    normalEC *= sign(texcoordNormalization2D.x);\\n\\\n#ifndef PER_INSTANCE_COLOR\\n\\\n    // Use vertex's sidedness to compute its texture coordinate.\\n\\\n    v_texcoordT = clamp(sign(texcoordNormalization2D.x), 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    // A \\\"perfect\\\" implementation would push along normals according to the angle against forward.\\n\\\n    // In practice, just pushing the normal out by halfWidth is sufficient for morph views.\\n\\\n    positionEc2D.xyz += halfWidth * max(0.0, czm_metersPerPixel(positionEc2D)) * normalEC; // prevent artifacts when czm_metersPerPixel is negative (behind camera)\\n\\\n\\n\\\n    // Blend for actual position\\n\\\n    gl_Position = czm_projection * mix(positionEc2D, positionEc3D, czm_morphTime);\\n\\\n\\n\\\n#ifdef ANGLE_VARYING\\n\\\n    // Approximate relative screen space direction of the line.\\n\\\n    vec2 approxLineDirection = normalize(vec2(v_forwardDirectionEC.x, -v_forwardDirectionEC.y));\\n\\\n    approxLineDirection.y = czm_branchFreeTernary(approxLineDirection.x == 0.0 && approxLineDirection.y == 0.0, -1.0, approxLineDirection.y);\\n\\\n    v_polylineAngle = czm_fastApproximateAtan(approxLineDirection.x, approxLineDirection.y);\\n\\\n#endif\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"da3d78702229b9ed1e5af4b46ea3c335","cacheData":{"env":{}}}