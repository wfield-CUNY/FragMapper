{"id":"node_modules/cesium/Source/Shaders/Builtin/Functions/metersPerPixel.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when passing in a custom pixel ratio. For example, passing in 1.0 will return meters per native device pixel.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n * @param {float} pixelRatio The scaling factor from pixel space to coordinate space\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC, float pixelRatio)\\n\\\n{\\n\\\n    float width = czm_viewport.z;\\n\\\n    float height = czm_viewport.w;\\n\\\n    float pixelWidth;\\n\\\n    float pixelHeight;\\n\\\n\\n\\\n    float top = czm_frustumPlanes.x;\\n\\\n    float bottom = czm_frustumPlanes.y;\\n\\\n    float left = czm_frustumPlanes.z;\\n\\\n    float right = czm_frustumPlanes.w;\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode2D || czm_orthographicIn3D == 1.0)\\n\\\n    {\\n\\\n        float frustumWidth = right - left;\\n\\\n        float frustumHeight = top - bottom;\\n\\\n        pixelWidth = frustumWidth / width;\\n\\\n        pixelHeight = frustumHeight / height;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float distanceToPixel = -positionEC.z;\\n\\\n        float inverseNear = 1.0 / czm_currentFrustum.x;\\n\\\n        float tanTheta = top * inverseNear;\\n\\\n        pixelHeight = 2.0 * distanceToPixel * tanTheta / height;\\n\\\n        tanTheta = right * inverseNear;\\n\\\n        pixelWidth = 2.0 * distanceToPixel * tanTheta / width;\\n\\\n    }\\n\\\n\\n\\\n    return max(pixelWidth, pixelHeight) * pixelRatio;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when scaling by pixel ratio.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC)\\n\\\n{\\n\\\n    return czm_metersPerPixel(positionEC, czm_pixelRatio);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/metersPerPixel.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/metersPerPixel.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/Builtin/Functions/metersPerPixel.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when passing in a custom pixel ratio. For example, passing in 1.0 will return meters per native device pixel.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n * @param {float} pixelRatio The scaling factor from pixel space to coordinate space\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC, float pixelRatio)\\n\\\n{\\n\\\n    float width = czm_viewport.z;\\n\\\n    float height = czm_viewport.w;\\n\\\n    float pixelWidth;\\n\\\n    float pixelHeight;\\n\\\n\\n\\\n    float top = czm_frustumPlanes.x;\\n\\\n    float bottom = czm_frustumPlanes.y;\\n\\\n    float left = czm_frustumPlanes.z;\\n\\\n    float right = czm_frustumPlanes.w;\\n\\\n\\n\\\n    if (czm_sceneMode == czm_sceneMode2D || czm_orthographicIn3D == 1.0)\\n\\\n    {\\n\\\n        float frustumWidth = right - left;\\n\\\n        float frustumHeight = top - bottom;\\n\\\n        pixelWidth = frustumWidth / width;\\n\\\n        pixelHeight = frustumHeight / height;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float distanceToPixel = -positionEC.z;\\n\\\n        float inverseNear = 1.0 / czm_currentFrustum.x;\\n\\\n        float tanTheta = top * inverseNear;\\n\\\n        pixelHeight = 2.0 * distanceToPixel * tanTheta / height;\\n\\\n        tanTheta = right * inverseNear;\\n\\\n        pixelWidth = 2.0 * distanceToPixel * tanTheta / width;\\n\\\n    }\\n\\\n\\n\\\n    return max(pixelWidth, pixelHeight) * pixelRatio;\\n\\\n}\\n\\\n\\n\\\n/**\\n\\\n * Computes the size of a pixel in meters at a distance from the eye.\\n\\\n * <p>\\n\\\n * Use this version when scaling by pixel ratio.\\n\\\n * </p>\\n\\\n * @name czm_metersPerPixel\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} positionEC The position to get the meters per pixel in eye coordinates.\\n\\\n *\\n\\\n * @returns {float} The meters per pixel at positionEC.\\n\\\n */\\n\\\nfloat czm_metersPerPixel(vec4 positionEC)\\n\\\n{\\n\\\n    return czm_metersPerPixel(positionEC, czm_pixelRatio);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"cae4bee8959df582bec33821f114b64d","cacheData":{"env":{}}}