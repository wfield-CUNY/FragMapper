{"id":"node_modules/cesium/Source/Shaders/Builtin/Functions/nearFarScalar.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/**\\n\\\n * Computes a value that scales with distance.  The scaling is clamped at the near and\\n\\\n * far distances, and does not extrapolate.  This function works with the\\n\\\n * {@link NearFarScalar} JavaScript class.\\n\\\n *\\n\\\n * @name czm_nearFarScalar\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} nearFarScalar A vector with 4 components: Near distance (x), Near value (y), Far distance (z), Far value (w).\\n\\\n * @param {float} cameraDistSq The square of the current distance from the camera.\\n\\\n *\\n\\\n * @returns {float} The value at this distance.\\n\\\n */\\n\\\nfloat czm_nearFarScalar(vec4 nearFarScalar, float cameraDistSq)\\n\\\n{\\n\\\n    float valueAtMin = nearFarScalar.y;\\n\\\n    float valueAtMax = nearFarScalar.w;\\n\\\n    float nearDistanceSq = nearFarScalar.x * nearFarScalar.x;\\n\\\n    float farDistanceSq = nearFarScalar.z * nearFarScalar.z;\\n\\\n\\n\\\n    float t = (cameraDistSq - nearDistanceSq) / (farDistanceSq - nearDistanceSq);\\n\\\n\\n\\\n    t = pow(clamp(t, 0.0, 1.0), 0.2);\\n\\\n\\n\\\n    return mix(valueAtMin, valueAtMax, t);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/nearFarScalar.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/nearFarScalar.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/Builtin/Functions/nearFarScalar.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Computes a value that scales with distance.  The scaling is clamped at the near and\\n\\\n * far distances, and does not extrapolate.  This function works with the\\n\\\n * {@link NearFarScalar} JavaScript class.\\n\\\n *\\n\\\n * @name czm_nearFarScalar\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} nearFarScalar A vector with 4 components: Near distance (x), Near value (y), Far distance (z), Far value (w).\\n\\\n * @param {float} cameraDistSq The square of the current distance from the camera.\\n\\\n *\\n\\\n * @returns {float} The value at this distance.\\n\\\n */\\n\\\nfloat czm_nearFarScalar(vec4 nearFarScalar, float cameraDistSq)\\n\\\n{\\n\\\n    float valueAtMin = nearFarScalar.y;\\n\\\n    float valueAtMax = nearFarScalar.w;\\n\\\n    float nearDistanceSq = nearFarScalar.x * nearFarScalar.x;\\n\\\n    float farDistanceSq = nearFarScalar.z * nearFarScalar.z;\\n\\\n\\n\\\n    float t = (cameraDistSq - nearDistanceSq) / (farDistanceSq - nearDistanceSq);\\n\\\n\\n\\\n    t = pow(clamp(t, 0.0, 1.0), 0.2);\\n\\\n\\n\\\n    return mix(valueAtMin, valueAtMax, t);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"38173e30d9970461e9dcec6973629b1e","cacheData":{"env":{}}}