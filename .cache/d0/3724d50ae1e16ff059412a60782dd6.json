{"id":"node_modules/cesium/Source/Shaders/Builtin/Functions/hue.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/**\\n\\\n * Adjusts the hue of a color.\\n\\\n * \\n\\\n * @name czm_hue\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color.\\n\\\n * @param {float} adjustment The amount to adjust the hue of the color in radians.\\n\\\n *\\n\\\n * @returns {float} The color with the hue adjusted.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 adjustHue = czm_hue(color, czm_pi); // The same as czm_hue(color, -czm_pi)\\n\\\n */\\n\\\nvec3 czm_hue(vec3 rgb, float adjustment)\\n\\\n{\\n\\\n    const mat3 toYIQ = mat3(0.299,     0.587,     0.114,\\n\\\n                            0.595716, -0.274453, -0.321263,\\n\\\n                            0.211456, -0.522591,  0.311135);\\n\\\n    const mat3 toRGB = mat3(1.0,  0.9563,  0.6210,\\n\\\n                            1.0, -0.2721, -0.6474,\\n\\\n                            1.0, -1.107,   1.7046);\\n\\\n    \\n\\\n    vec3 yiq = toYIQ * rgb;\\n\\\n    float hue = atan(yiq.z, yiq.y) + adjustment;\\n\\\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\n\\\n    \\n\\\n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\n\\\n    return toRGB * color;\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/hue.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/hue.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/Builtin/Functions/hue.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Adjusts the hue of a color.\\n\\\n * \\n\\\n * @name czm_hue\\n\\\n * @glslFunction\\n\\\n * \\n\\\n * @param {vec3} rgb The color.\\n\\\n * @param {float} adjustment The amount to adjust the hue of the color in radians.\\n\\\n *\\n\\\n * @returns {float} The color with the hue adjusted.\\n\\\n *\\n\\\n * @example\\n\\\n * vec3 adjustHue = czm_hue(color, czm_pi); // The same as czm_hue(color, -czm_pi)\\n\\\n */\\n\\\nvec3 czm_hue(vec3 rgb, float adjustment)\\n\\\n{\\n\\\n    const mat3 toYIQ = mat3(0.299,     0.587,     0.114,\\n\\\n                            0.595716, -0.274453, -0.321263,\\n\\\n                            0.211456, -0.522591,  0.311135);\\n\\\n    const mat3 toRGB = mat3(1.0,  0.9563,  0.6210,\\n\\\n                            1.0, -0.2721, -0.6474,\\n\\\n                            1.0, -1.107,   1.7046);\\n\\\n    \\n\\\n    vec3 yiq = toYIQ * rgb;\\n\\\n    float hue = atan(yiq.z, yiq.y) + adjustment;\\n\\\n    float chroma = sqrt(yiq.z * yiq.z + yiq.y * yiq.y);\\n\\\n    \\n\\\n    vec3 color = vec3(yiq.x, chroma * cos(hue), chroma * sin(hue));\\n\\\n    return toRGB * color;\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"8d5b85287c3c3e743eb4b6aa370e492d","cacheData":{"env":{}}}