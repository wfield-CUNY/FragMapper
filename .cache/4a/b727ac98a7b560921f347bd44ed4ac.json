{"id":"node_modules/cesium/Source/Shaders/EllipsoidFS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\nuniform vec3 u_oneOverEllipsoidRadiiSquared;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvec4 computeEllipsoidColor(czm_ray ray, float intersection, float side)\\n\\\n{\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, intersection);\\n\\\n    vec3 positionMC = (czm_inverseModelView * vec4(positionEC, 1.0)).xyz;\\n\\\n    vec3 geodeticNormal = normalize(czm_geodeticSurfaceNormal(positionMC, vec3(0.0), u_oneOverEllipsoidRadiiSquared));\\n\\\n    vec3 sphericalNormal = normalize(positionMC / u_radii);\\n\\\n    vec3 normalMC = geodeticNormal * side;              // normalized surface normal (always facing the viewer) in model coordinates\\n\\\n    vec3 normalEC = normalize(czm_normal * normalMC);   // normalized surface normal in eye coordiantes\\n\\\n\\n\\\n    vec2 st = czm_ellipsoidWgs84TextureCoordinates(sphericalNormal);\\n\\\n    vec3 positionToEyeEC = -positionEC;\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.s = st.s;\\n\\\n    materialInput.st = st;\\n\\\n    materialInput.str = (positionMC + u_radii) / u_radii;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef ONLY_SUN_LIGHTING\\n\\\n    return czm_private_phong(normalize(positionToEyeEC), material, czm_sunDirectionEC);\\n\\\n#else\\n\\\n    return czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // PERFORMANCE_TODO: When dynamic branching is available, compute ratio of maximum and minimum radii\\n\\\n    // in the vertex shader. Only when it is larger than some constant, march along the ray.\\n\\\n    // Otherwise perform one intersection test which will be the common case.\\n\\\n\\n\\\n    // Test if the ray intersects a sphere with the ellipsoid's maximum radius.\\n\\\n    // For very oblate ellipsoids, using the ellipsoid's radii for an intersection test\\n\\\n    // may cause false negatives. This will discard fragments before marching the ray forward.\\n\\\n    float maxRadius = max(u_radii.x, max(u_radii.y, u_radii.z)) * 1.5;\\n\\\n    vec3 direction = normalize(v_positionEC);\\n\\\n    vec3 ellipsoidCenter = czm_modelView[3].xyz;\\n\\\n\\n\\\n    float t1 = -1.0;\\n\\\n    float t2 = -1.0;\\n\\\n\\n\\\n    float b = -2.0 * dot(direction, ellipsoidCenter);\\n\\\n    float c = dot(ellipsoidCenter, ellipsoidCenter) - maxRadius * maxRadius;\\n\\\n\\n\\\n    float discriminant = b * b - 4.0 * c;\\n\\\n    if (discriminant >= 0.0) {\\n\\\n        t1 = (-b - sqrt(discriminant)) * 0.5;\\n\\\n        t2 = (-b + sqrt(discriminant)) * 0.5;\\n\\\n    }\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 < 0.0) {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    float t = min(t1, t2);\\n\\\n    if (t < 0.0) {\\n\\\n        t = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    // March ray forward to intersection with larger sphere and find\\n\\\n    czm_ray ray = czm_ray(t * direction, direction);\\n\\\n\\n\\\n    vec3 ellipsoid_inverseRadii = vec3(1.0 / u_radii.x, 1.0 / u_radii.y, 1.0 / u_radii.z);\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoidCenter, ellipsoid_inverseRadii);\\n\\\n\\n\\\n    if (czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If the viewer is outside, compute outsideFaceColor, with normals facing outward.\\n\\\n    vec4 outsideFaceColor = (intersection.start != 0.0) ? computeEllipsoidColor(ray, intersection.start, 1.0) : vec4(0.0);\\n\\\n\\n\\\n    // If the viewer either is inside or can see inside, compute insideFaceColor, with normals facing inward.\\n\\\n    vec4 insideFaceColor = (outsideFaceColor.a < 1.0) ? computeEllipsoidColor(ray, intersection.stop, -1.0) : vec4(0.0);\\n\\\n\\n\\\n    gl_FragColor = mix(insideFaceColor, outsideFaceColor, outsideFaceColor.a);\\n\\\n    gl_FragColor.a = 1.0 - (1.0 - insideFaceColor.a) * (1.0 - outsideFaceColor.a);\\n\\\n\\n\\\n#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    t = (intersection.start != 0.0) ? intersection.start : intersection.stop;\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, t);\\n\\\n    vec4 positionCC = czm_projection * vec4(positionEC, 1.0);\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(1.0 + positionCC.w);\\n\\\n#else\\n\\\n    float z = positionCC.z / positionCC.w;\\n\\\n\\n\\\n    float n = czm_depthRange.near;\\n\\\n    float f = czm_depthRange.far;\\n\\\n\\n\\\n    gl_FragDepthEXT = (z * (f - n) + f + n) * 0.5;\\n\\\n#endif\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/EllipsoidFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/EllipsoidFS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/EllipsoidFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n#extension GL_EXT_frag_depth : enable\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\nuniform vec3 u_radii;\\n\\\nuniform vec3 u_oneOverEllipsoidRadiiSquared;\\n\\\n\\n\\\nvarying vec3 v_positionEC;\\n\\\n\\n\\\nvec4 computeEllipsoidColor(czm_ray ray, float intersection, float side)\\n\\\n{\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, intersection);\\n\\\n    vec3 positionMC = (czm_inverseModelView * vec4(positionEC, 1.0)).xyz;\\n\\\n    vec3 geodeticNormal = normalize(czm_geodeticSurfaceNormal(positionMC, vec3(0.0), u_oneOverEllipsoidRadiiSquared));\\n\\\n    vec3 sphericalNormal = normalize(positionMC / u_radii);\\n\\\n    vec3 normalMC = geodeticNormal * side;              // normalized surface normal (always facing the viewer) in model coordinates\\n\\\n    vec3 normalEC = normalize(czm_normal * normalMC);   // normalized surface normal in eye coordiantes\\n\\\n\\n\\\n    vec2 st = czm_ellipsoidWgs84TextureCoordinates(sphericalNormal);\\n\\\n    vec3 positionToEyeEC = -positionEC;\\n\\\n\\n\\\n    czm_materialInput materialInput;\\n\\\n    materialInput.s = st.s;\\n\\\n    materialInput.st = st;\\n\\\n    materialInput.str = (positionMC + u_radii) / u_radii;\\n\\\n    materialInput.normalEC = normalEC;\\n\\\n    materialInput.tangentToEyeMatrix = czm_eastNorthUpToEyeCoordinates(positionMC, normalEC);\\n\\\n    materialInput.positionToEyeEC = positionToEyeEC;\\n\\\n    czm_material material = czm_getMaterial(materialInput);\\n\\\n\\n\\\n#ifdef ONLY_SUN_LIGHTING\\n\\\n    return czm_private_phong(normalize(positionToEyeEC), material, czm_sunDirectionEC);\\n\\\n#else\\n\\\n    return czm_phong(normalize(positionToEyeEC), material, czm_lightDirectionEC);\\n\\\n#endif\\n\\\n}\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    // PERFORMANCE_TODO: When dynamic branching is available, compute ratio of maximum and minimum radii\\n\\\n    // in the vertex shader. Only when it is larger than some constant, march along the ray.\\n\\\n    // Otherwise perform one intersection test which will be the common case.\\n\\\n\\n\\\n    // Test if the ray intersects a sphere with the ellipsoid's maximum radius.\\n\\\n    // For very oblate ellipsoids, using the ellipsoid's radii for an intersection test\\n\\\n    // may cause false negatives. This will discard fragments before marching the ray forward.\\n\\\n    float maxRadius = max(u_radii.x, max(u_radii.y, u_radii.z)) * 1.5;\\n\\\n    vec3 direction = normalize(v_positionEC);\\n\\\n    vec3 ellipsoidCenter = czm_modelView[3].xyz;\\n\\\n\\n\\\n    float t1 = -1.0;\\n\\\n    float t2 = -1.0;\\n\\\n\\n\\\n    float b = -2.0 * dot(direction, ellipsoidCenter);\\n\\\n    float c = dot(ellipsoidCenter, ellipsoidCenter) - maxRadius * maxRadius;\\n\\\n\\n\\\n    float discriminant = b * b - 4.0 * c;\\n\\\n    if (discriminant >= 0.0) {\\n\\\n        t1 = (-b - sqrt(discriminant)) * 0.5;\\n\\\n        t2 = (-b + sqrt(discriminant)) * 0.5;\\n\\\n    }\\n\\\n\\n\\\n    if (t1 < 0.0 && t2 < 0.0) {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    float t = min(t1, t2);\\n\\\n    if (t < 0.0) {\\n\\\n        t = 0.0;\\n\\\n    }\\n\\\n\\n\\\n    // March ray forward to intersection with larger sphere and find\\n\\\n    czm_ray ray = czm_ray(t * direction, direction);\\n\\\n\\n\\\n    vec3 ellipsoid_inverseRadii = vec3(1.0 / u_radii.x, 1.0 / u_radii.y, 1.0 / u_radii.z);\\n\\\n\\n\\\n    czm_raySegment intersection = czm_rayEllipsoidIntersectionInterval(ray, ellipsoidCenter, ellipsoid_inverseRadii);\\n\\\n\\n\\\n    if (czm_isEmpty(intersection))\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If the viewer is outside, compute outsideFaceColor, with normals facing outward.\\n\\\n    vec4 outsideFaceColor = (intersection.start != 0.0) ? computeEllipsoidColor(ray, intersection.start, 1.0) : vec4(0.0);\\n\\\n\\n\\\n    // If the viewer either is inside or can see inside, compute insideFaceColor, with normals facing inward.\\n\\\n    vec4 insideFaceColor = (outsideFaceColor.a < 1.0) ? computeEllipsoidColor(ray, intersection.stop, -1.0) : vec4(0.0);\\n\\\n\\n\\\n    gl_FragColor = mix(insideFaceColor, outsideFaceColor, outsideFaceColor.a);\\n\\\n    gl_FragColor.a = 1.0 - (1.0 - insideFaceColor.a) * (1.0 - outsideFaceColor.a);\\n\\\n\\n\\\n#ifdef WRITE_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    t = (intersection.start != 0.0) ? intersection.start : intersection.stop;\\n\\\n    vec3 positionEC = czm_pointAlongRay(ray, t);\\n\\\n    vec4 positionCC = czm_projection * vec4(positionEC, 1.0);\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth(1.0 + positionCC.w);\\n\\\n#else\\n\\\n    float z = positionCC.z / positionCC.w;\\n\\\n\\n\\\n    float n = czm_depthRange.near;\\n\\\n    float f = czm_depthRange.far;\\n\\\n\\n\\\n    gl_FragDepthEXT = (z * (f - n) + f + n) * 0.5;\\n\\\n#endif\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"0fc12ed15505c48f7c2bd9268415306a","cacheData":{"env":{}}}