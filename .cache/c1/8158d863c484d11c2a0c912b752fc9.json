{"id":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416},{"name":"./getStringFromTypedArray.js","loc":{"line":1,"column":36},"parent":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\Source\\Core\\getJsonFromTypedArray.js","resolved":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\Source\\Core\\getStringFromTypedArray.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _getStringFromTypedArray = _interopRequireDefault(require(\"./getStringFromTypedArray.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Parses JSON from a Uint8Array.\n *\n * @function\n *\n * @param {Uint8Array} uint8Array The Uint8Array to read from.\n * @param {Number} [byteOffset=0] The byte offset to start reading from.\n * @param {Number} [byteLength] The byte length to read. If byteLength is omitted the remainder of the buffer is read.\n * @returns {Object} An object containing the parsed JSON.\n *\n * @private\n */\nfunction getJsonFromTypedArray(uint8Array, byteOffset, byteLength) {\n  return JSON.parse((0, _getStringFromTypedArray.default)(uint8Array, byteOffset, byteLength));\n}\n\nvar _default = getJsonFromTypedArray;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":3,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":0}},{"name":"getJsonFromTypedArray","generated":{"line":24,"column":9},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":9}},{"generated":{"line":24,"column":30},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":0}},{"name":"uint8Array","generated":{"line":24,"column":31},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":31}},{"generated":{"line":24,"column":41},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":0}},{"name":"byteOffset","generated":{"line":24,"column":43},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":43}},{"generated":{"line":24,"column":53},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":0}},{"name":"byteLength","generated":{"line":24,"column":55},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":55}},{"generated":{"line":24,"column":65},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":0}},{"generated":{"line":24,"column":67},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":15,"column":67}},{"generated":{"line":25,"column":0},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":16,"column":2}},{"name":"JSON","generated":{"line":25,"column":9},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":16,"column":9}},{"generated":{"line":25,"column":13},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":16,"column":13}},{"name":"parse","generated":{"line":25,"column":14},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":16,"column":14}},{"generated":{"line":25,"column":19},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":16,"column":9}},{"generated":{"line":25,"column":20},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":17,"column":4}},{"name":"uint8Array","generated":{"line":25,"column":58},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":17,"column":28}},{"generated":{"line":25,"column":68},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":17,"column":4}},{"name":"byteOffset","generated":{"line":25,"column":70},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":17,"column":40}},{"generated":{"line":25,"column":80},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":17,"column":4}},{"name":"byteLength","generated":{"line":25,"column":82},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":17,"column":52}},{"generated":{"line":25,"column":92},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":17,"column":4}},{"generated":{"line":25,"column":93},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":16,"column":9}},{"generated":{"line":25,"column":94},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":16,"column":2}},{"generated":{"line":26,"column":0},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":19,"column":1}},{"name":"getJsonFromTypedArray","generated":{"line":28,"column":15},"source":"node_modules/cesium/Source/Core/getJsonFromTypedArray.js","original":{"line":21,"column":15}}],"sources":{"node_modules/cesium/Source/Core/getJsonFromTypedArray.js":"import getStringFromTypedArray from \"./getStringFromTypedArray.js\";\n\n/**\n * Parses JSON from a Uint8Array.\n *\n * @function\n *\n * @param {Uint8Array} uint8Array The Uint8Array to read from.\n * @param {Number} [byteOffset=0] The byte offset to start reading from.\n * @param {Number} [byteLength] The byte length to read. If byteLength is omitted the remainder of the buffer is read.\n * @returns {Object} An object containing the parsed JSON.\n *\n * @private\n */\nfunction getJsonFromTypedArray(uint8Array, byteOffset, byteLength) {\n  return JSON.parse(\n    getStringFromTypedArray(uint8Array, byteOffset, byteLength)\n  );\n}\n\nexport default getJsonFromTypedArray;\n"},"lineCount":null}},"error":null,"hash":"252d98ac1eb6a0e0cf4dff3a1c3c6858","cacheData":{"env":{}}}