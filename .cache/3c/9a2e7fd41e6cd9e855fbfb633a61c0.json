{"id":"node_modules/cesium/Source/Shaders/PostProcessStages/AmbientOcclusionGenerate.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"uniform sampler2D randomTexture;\\n\\\nuniform sampler2D depthTexture;\\n\\\nuniform float intensity;\\n\\\nuniform float bias;\\n\\\nuniform float lengthCap;\\n\\\nuniform float stepSize;\\n\\\nuniform float frustumLength;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec4 clipToEye(vec2 uv, float depth)\\n\\\n{\\n\\\n    vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\\n\\\n    vec4 posEC = czm_inverseProjection * vec4(xy, depth, 1.0);\\n\\\n    posEC = posEC / posEC.w;\\n\\\n    return posEC;\\n\\\n}\\n\\\n\\n\\\n//Reconstruct Normal Without Edge Removation\\n\\\nvec3 getNormalXEdge(vec3 posInCamera, float depthU, float depthD, float depthL, float depthR, vec2 pixelSize)\\n\\\n{\\n\\\n    vec4 posInCameraUp = clipToEye(v_textureCoordinates - vec2(0.0, pixelSize.y), depthU);\\n\\\n    vec4 posInCameraDown = clipToEye(v_textureCoordinates + vec2(0.0, pixelSize.y), depthD);\\n\\\n    vec4 posInCameraLeft = clipToEye(v_textureCoordinates - vec2(pixelSize.x, 0.0), depthL);\\n\\\n    vec4 posInCameraRight = clipToEye(v_textureCoordinates + vec2(pixelSize.x, 0.0), depthR);\\n\\\n\\n\\\n    vec3 up = posInCamera.xyz - posInCameraUp.xyz;\\n\\\n    vec3 down = posInCameraDown.xyz - posInCamera.xyz;\\n\\\n    vec3 left = posInCamera.xyz - posInCameraLeft.xyz;\\n\\\n    vec3 right = posInCameraRight.xyz - posInCamera.xyz;\\n\\\n\\n\\\n    vec3 DX = length(left) < length(right) ? left : right;\\n\\\n    vec3 DY = length(up) < length(down) ? up : down;\\n\\\n\\n\\\n    return normalize(cross(DY, DX));\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    vec4 posInCamera = clipToEye(v_textureCoordinates, depth);\\n\\\n\\n\\\n    if (posInCamera.z > frustumLength)\\n\\\n    {\\n\\\n        gl_FragColor = vec4(1.0);\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    vec2 pixelSize = czm_pixelRatio / czm_viewport.zw;\\n\\\n    float depthU = czm_readDepth(depthTexture, v_textureCoordinates - vec2(0.0, pixelSize.y));\\n\\\n    float depthD = czm_readDepth(depthTexture, v_textureCoordinates + vec2(0.0, pixelSize.y));\\n\\\n    float depthL = czm_readDepth(depthTexture, v_textureCoordinates - vec2(pixelSize.x, 0.0));\\n\\\n    float depthR = czm_readDepth(depthTexture, v_textureCoordinates + vec2(pixelSize.x, 0.0));\\n\\\n    vec3 normalInCamera = getNormalXEdge(posInCamera.xyz, depthU, depthD, depthL, depthR, pixelSize);\\n\\\n\\n\\\n    float ao = 0.0;\\n\\\n    vec2 sampleDirection = vec2(1.0, 0.0);\\n\\\n    float gapAngle = 90.0 * czm_radiansPerDegree;\\n\\\n\\n\\\n    // RandomNoise\\n\\\n    float randomVal = texture2D(randomTexture, v_textureCoordinates).x;\\n\\\n\\n\\\n    //Loop for each direction\\n\\\n    for (int i = 0; i < 4; i++)\\n\\\n    {\\n\\\n        float newGapAngle = gapAngle * (float(i) + randomVal);\\n\\\n        float cosVal = cos(newGapAngle);\\n\\\n        float sinVal = sin(newGapAngle);\\n\\\n\\n\\\n        //Rotate Sampling Direction\\n\\\n        vec2 rotatedSampleDirection = vec2(cosVal * sampleDirection.x - sinVal * sampleDirection.y, sinVal * sampleDirection.x + cosVal * sampleDirection.y);\\n\\\n        float localAO = 0.0;\\n\\\n        float localStepSize = stepSize;\\n\\\n\\n\\\n        //Loop for each step\\n\\\n        for (int j = 0; j < 6; j++)\\n\\\n        {\\n\\\n            vec2 newCoords = v_textureCoordinates + rotatedSampleDirection * localStepSize * pixelSize;\\n\\\n\\n\\\n            //Exception Handling\\n\\\n            if(newCoords.x > 1.0 || newCoords.y > 1.0 || newCoords.x < 0.0 || newCoords.y < 0.0)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float stepDepthInfo = czm_readDepth(depthTexture, newCoords);\\n\\\n            vec4 stepPosInCamera = clipToEye(newCoords, stepDepthInfo);\\n\\\n            vec3 diffVec = stepPosInCamera.xyz - posInCamera.xyz;\\n\\\n            float len = length(diffVec);\\n\\\n\\n\\\n            if (len > lengthCap)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float dotVal = clamp(dot(normalInCamera, normalize(diffVec)), 0.0, 1.0 );\\n\\\n            float weight = len / lengthCap;\\n\\\n            weight = 1.0 - weight * weight;\\n\\\n\\n\\\n            if (dotVal < bias)\\n\\\n            {\\n\\\n                dotVal = 0.0;\\n\\\n            }\\n\\\n\\n\\\n            localAO = max(localAO, dotVal * weight);\\n\\\n            localStepSize += stepSize;\\n\\\n        }\\n\\\n        ao += localAO;\\n\\\n    }\\n\\\n\\n\\\n    ao /= 4.0;\\n\\\n    ao = 1.0 - clamp(ao, 0.0, 1.0);\\n\\\n    ao = pow(ao, intensity);\\n\\\n    gl_FragColor = vec4(vec3(ao), 1.0);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/PostProcessStages/AmbientOcclusionGenerate.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/PostProcessStages/AmbientOcclusionGenerate.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/PostProcessStages/AmbientOcclusionGenerate.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D randomTexture;\\n\\\nuniform sampler2D depthTexture;\\n\\\nuniform float intensity;\\n\\\nuniform float bias;\\n\\\nuniform float lengthCap;\\n\\\nuniform float stepSize;\\n\\\nuniform float frustumLength;\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n\\n\\\nvec4 clipToEye(vec2 uv, float depth)\\n\\\n{\\n\\\n    vec2 xy = vec2((uv.x * 2.0 - 1.0), ((1.0 - uv.y) * 2.0 - 1.0));\\n\\\n    vec4 posEC = czm_inverseProjection * vec4(xy, depth, 1.0);\\n\\\n    posEC = posEC / posEC.w;\\n\\\n    return posEC;\\n\\\n}\\n\\\n\\n\\\n//Reconstruct Normal Without Edge Removation\\n\\\nvec3 getNormalXEdge(vec3 posInCamera, float depthU, float depthD, float depthL, float depthR, vec2 pixelSize)\\n\\\n{\\n\\\n    vec4 posInCameraUp = clipToEye(v_textureCoordinates - vec2(0.0, pixelSize.y), depthU);\\n\\\n    vec4 posInCameraDown = clipToEye(v_textureCoordinates + vec2(0.0, pixelSize.y), depthD);\\n\\\n    vec4 posInCameraLeft = clipToEye(v_textureCoordinates - vec2(pixelSize.x, 0.0), depthL);\\n\\\n    vec4 posInCameraRight = clipToEye(v_textureCoordinates + vec2(pixelSize.x, 0.0), depthR);\\n\\\n\\n\\\n    vec3 up = posInCamera.xyz - posInCameraUp.xyz;\\n\\\n    vec3 down = posInCameraDown.xyz - posInCamera.xyz;\\n\\\n    vec3 left = posInCamera.xyz - posInCameraLeft.xyz;\\n\\\n    vec3 right = posInCameraRight.xyz - posInCamera.xyz;\\n\\\n\\n\\\n    vec3 DX = length(left) < length(right) ? left : right;\\n\\\n    vec3 DY = length(up) < length(down) ? up : down;\\n\\\n\\n\\\n    return normalize(cross(DY, DX));\\n\\\n}\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n    float depth = czm_readDepth(depthTexture, v_textureCoordinates);\\n\\\n    vec4 posInCamera = clipToEye(v_textureCoordinates, depth);\\n\\\n\\n\\\n    if (posInCamera.z > frustumLength)\\n\\\n    {\\n\\\n        gl_FragColor = vec4(1.0);\\n\\\n        return;\\n\\\n    }\\n\\\n\\n\\\n    vec2 pixelSize = czm_pixelRatio / czm_viewport.zw;\\n\\\n    float depthU = czm_readDepth(depthTexture, v_textureCoordinates - vec2(0.0, pixelSize.y));\\n\\\n    float depthD = czm_readDepth(depthTexture, v_textureCoordinates + vec2(0.0, pixelSize.y));\\n\\\n    float depthL = czm_readDepth(depthTexture, v_textureCoordinates - vec2(pixelSize.x, 0.0));\\n\\\n    float depthR = czm_readDepth(depthTexture, v_textureCoordinates + vec2(pixelSize.x, 0.0));\\n\\\n    vec3 normalInCamera = getNormalXEdge(posInCamera.xyz, depthU, depthD, depthL, depthR, pixelSize);\\n\\\n\\n\\\n    float ao = 0.0;\\n\\\n    vec2 sampleDirection = vec2(1.0, 0.0);\\n\\\n    float gapAngle = 90.0 * czm_radiansPerDegree;\\n\\\n\\n\\\n    // RandomNoise\\n\\\n    float randomVal = texture2D(randomTexture, v_textureCoordinates).x;\\n\\\n\\n\\\n    //Loop for each direction\\n\\\n    for (int i = 0; i < 4; i++)\\n\\\n    {\\n\\\n        float newGapAngle = gapAngle * (float(i) + randomVal);\\n\\\n        float cosVal = cos(newGapAngle);\\n\\\n        float sinVal = sin(newGapAngle);\\n\\\n\\n\\\n        //Rotate Sampling Direction\\n\\\n        vec2 rotatedSampleDirection = vec2(cosVal * sampleDirection.x - sinVal * sampleDirection.y, sinVal * sampleDirection.x + cosVal * sampleDirection.y);\\n\\\n        float localAO = 0.0;\\n\\\n        float localStepSize = stepSize;\\n\\\n\\n\\\n        //Loop for each step\\n\\\n        for (int j = 0; j < 6; j++)\\n\\\n        {\\n\\\n            vec2 newCoords = v_textureCoordinates + rotatedSampleDirection * localStepSize * pixelSize;\\n\\\n\\n\\\n            //Exception Handling\\n\\\n            if(newCoords.x > 1.0 || newCoords.y > 1.0 || newCoords.x < 0.0 || newCoords.y < 0.0)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float stepDepthInfo = czm_readDepth(depthTexture, newCoords);\\n\\\n            vec4 stepPosInCamera = clipToEye(newCoords, stepDepthInfo);\\n\\\n            vec3 diffVec = stepPosInCamera.xyz - posInCamera.xyz;\\n\\\n            float len = length(diffVec);\\n\\\n\\n\\\n            if (len > lengthCap)\\n\\\n            {\\n\\\n                break;\\n\\\n            }\\n\\\n\\n\\\n            float dotVal = clamp(dot(normalInCamera, normalize(diffVec)), 0.0, 1.0 );\\n\\\n            float weight = len / lengthCap;\\n\\\n            weight = 1.0 - weight * weight;\\n\\\n\\n\\\n            if (dotVal < bias)\\n\\\n            {\\n\\\n                dotVal = 0.0;\\n\\\n            }\\n\\\n\\n\\\n            localAO = max(localAO, dotVal * weight);\\n\\\n            localStepSize += stepSize;\\n\\\n        }\\n\\\n        ao += localAO;\\n\\\n    }\\n\\\n\\n\\\n    ao /= 4.0;\\n\\\n    ao = 1.0 - clamp(ao, 0.0, 1.0);\\n\\\n    ao = pow(ao, intensity);\\n\\\n    gl_FragColor = vec4(vec3(ao), 1.0);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"be1dfc8718fc5ff78bf64951e6799122","cacheData":{"env":{}}}