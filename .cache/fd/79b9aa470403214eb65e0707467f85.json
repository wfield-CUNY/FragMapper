{"id":"node_modules/cesium/Source/Shaders/CloudNoiseVS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"uniform vec3 u_noiseTextureDimensions;\\n\\\nattribute vec2 position;\\n\\\n\\n\\\nvarying vec2 v_position;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_Position = vec4(position, 0.1, 1.0);\\n\\\n\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    float noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n    vec2 transformedPos = (position * 0.5) + vec2(0.5);\\n\\\n    transformedPos *= textureSliceWidth;\\n\\\n    transformedPos.x *= textureSliceWidth * inverseNoiseTextureRows;\\n\\\n    transformedPos.y *= noiseTextureRows;\\n\\\n    v_position = transformedPos;\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/CloudNoiseVS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/CloudNoiseVS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/CloudNoiseVS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform vec3 u_noiseTextureDimensions;\\n\\\nattribute vec2 position;\\n\\\n\\n\\\nvarying vec2 v_position;\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    gl_Position = vec4(position, 0.1, 1.0);\\n\\\n\\n\\\n    float textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\n    float noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\n    float inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n    vec2 transformedPos = (position * 0.5) + vec2(0.5);\\n\\\n    transformedPos *= textureSliceWidth;\\n\\\n    transformedPos.x *= textureSliceWidth * inverseNoiseTextureRows;\\n\\\n    transformedPos.y *= noiseTextureRows;\\n\\\n    v_position = transformedPos;\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"86a81b88ca08309aeca557fb9595ea89","cacheData":{"env":{}}}