{"id":"node_modules/cesium/Source/Shaders/Builtin/Functions/pbrMetallicRoughnessMaterial.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/**\\n\\\n * Compute parameters for physically based rendering using the\\n\\\n * metallic/roughness workflow. All inputs are linear; sRGB texture values must\\n\\\n * be decoded beforehand\\n\\\n *\\n\\\n * @name czm_pbrMetallicRoughnessMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} baseColor For dielectrics, this is the base color. For metals, this is the f0 value (reflectance at normal incidence)\\n\\\n * @param {float} metallic 0.0 indicates dielectric. 1.0 indicates metal. Values in between are allowed (e.g. to model rust or dirt);\\n\\\n * @param {float} roughness A value between 0.0 and 1.0\\n\\\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_pbrMetallicRoughnessMaterial(\\n\\\n    vec3 baseColor,\\n\\\n    float metallic,\\n\\\n    float roughness\\n\\\n) \\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n\\n\\\n    // roughness is authored as perceptual roughness\\n\\\n    // square it to get material roughness\\n\\\n    roughness = clamp(roughness, 0.0, 1.0);\\n\\\n    results.roughness = roughness * roughness;\\n\\\n\\n\\\n    // dielectrics us f0 = 0.04, metals use albedo as f0\\n\\\n    metallic = clamp(metallic, 0.0, 1.0);\\n\\\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\\n\\\n    vec3 f0 = mix(REFLECTANCE_DIELECTRIC, baseColor, metallic);\\n\\\n    results.f0 = f0;\\n\\\n\\n\\\n    // diffuse only applies to dielectrics.\\n\\\n    results.diffuseColor = baseColor * (1.0 - f0) * (1.0 - metallic);\\n\\\n\\n\\\n    return results;\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/pbrMetallicRoughnessMaterial.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/pbrMetallicRoughnessMaterial.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/Builtin/Functions/pbrMetallicRoughnessMaterial.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Compute parameters for physically based rendering using the\\n\\\n * metallic/roughness workflow. All inputs are linear; sRGB texture values must\\n\\\n * be decoded beforehand\\n\\\n *\\n\\\n * @name czm_pbrMetallicRoughnessMaterial\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec3} baseColor For dielectrics, this is the base color. For metals, this is the f0 value (reflectance at normal incidence)\\n\\\n * @param {float} metallic 0.0 indicates dielectric. 1.0 indicates metal. Values in between are allowed (e.g. to model rust or dirt);\\n\\\n * @param {float} roughness A value between 0.0 and 1.0\\n\\\n * @return {czm_pbrParameters} parameters to pass into {@link czm_pbrLighting}\\n\\\n */\\n\\\nczm_pbrParameters czm_pbrMetallicRoughnessMaterial(\\n\\\n    vec3 baseColor,\\n\\\n    float metallic,\\n\\\n    float roughness\\n\\\n) \\n\\\n{\\n\\\n    czm_pbrParameters results;\\n\\\n\\n\\\n    // roughness is authored as perceptual roughness\\n\\\n    // square it to get material roughness\\n\\\n    roughness = clamp(roughness, 0.0, 1.0);\\n\\\n    results.roughness = roughness * roughness;\\n\\\n\\n\\\n    // dielectrics us f0 = 0.04, metals use albedo as f0\\n\\\n    metallic = clamp(metallic, 0.0, 1.0);\\n\\\n    const vec3 REFLECTANCE_DIELECTRIC = vec3(0.04);\\n\\\n    vec3 f0 = mix(REFLECTANCE_DIELECTRIC, baseColor, metallic);\\n\\\n    results.f0 = f0;\\n\\\n\\n\\\n    // diffuse only applies to dielectrics.\\n\\\n    results.diffuseColor = baseColor * (1.0 - f0) * (1.0 - metallic);\\n\\\n\\n\\\n    return results;\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"2a5e81b4b12d0a79c6611754f35fe131","cacheData":{"env":{}}}