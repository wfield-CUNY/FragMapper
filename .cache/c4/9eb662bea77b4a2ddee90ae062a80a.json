{"id":"node_modules/cesium/Source/Shaders/Builtin/Functions/depthClamp.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"// emulated noperspective\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\nvarying float v_WindowZ;\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Emulates GL_DEPTH_CLAMP, which is not available in WebGL 1 or 2.\\n\\\n * GL_DEPTH_CLAMP clamps geometry that is outside the near and far planes, \\n\\\n * capping the shadow volume. More information here: \\n\\\n * https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_depth_clamp.txt.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is available we emulate GL_DEPTH_CLAMP by ensuring \\n\\\n * no geometry gets clipped by setting the clip space z value to 0.0 and then\\n\\\n * sending the unaltered screen space z value (using emulated noperspective\\n\\\n * interpolation) to the frag shader where it is clamped to [0,1] and then\\n\\\n * written with gl_FragDepth (see czm_writeDepthClamp). This technique is based on:\\n\\\n * https://stackoverflow.com/questions/5960757/how-to-emulate-gl-depth-clamp-nv.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is not available, which is the case on some mobile \\n\\\n * devices, we must attempt to fix this only in the vertex shader. \\n\\\n * The approach is to clamp the z value to the far plane, which closes the \\n\\\n * shadow volume but also distorts the geometry, so there can still be artifacts\\n\\\n * on frustum seams.\\n\\\n *\\n\\\n * @name czm_depthClamp\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} coords The vertex in clip coordinates.\\n\\\n * @returns {vec4} The modified vertex.\\n\\\n *\\n\\\n * @example\\n\\\n * gl_Position = czm_depthClamp(czm_modelViewProjection * vec4(position, 1.0));\\n\\\n *\\n\\\n * @see czm_writeDepthClamp\\n\\\n */\\n\\\nvec4 czm_depthClamp(vec4 coords)\\n\\\n{\\n\\\n#ifndef LOG_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    v_WindowZ = (0.5 * (coords.z / coords.w) + 0.5) * coords.w;\\n\\\n    coords.z = 0.0;\\n\\\n#else\\n\\\n    coords.z = min(coords.z, coords.w);\\n\\\n#endif\\n\\\n#endif\\n\\\n    return coords;\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/depthClamp.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/depthClamp.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/Builtin/Functions/depthClamp.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"// emulated noperspective\\n\\\n#if defined(GL_EXT_frag_depth) && !defined(LOG_DEPTH)\\n\\\nvarying float v_WindowZ;\\n\\\n#endif\\n\\\n\\n\\\n/**\\n\\\n * Emulates GL_DEPTH_CLAMP, which is not available in WebGL 1 or 2.\\n\\\n * GL_DEPTH_CLAMP clamps geometry that is outside the near and far planes, \\n\\\n * capping the shadow volume. More information here: \\n\\\n * https://www.khronos.org/registry/OpenGL/extensions/ARB/ARB_depth_clamp.txt.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is available we emulate GL_DEPTH_CLAMP by ensuring \\n\\\n * no geometry gets clipped by setting the clip space z value to 0.0 and then\\n\\\n * sending the unaltered screen space z value (using emulated noperspective\\n\\\n * interpolation) to the frag shader where it is clamped to [0,1] and then\\n\\\n * written with gl_FragDepth (see czm_writeDepthClamp). This technique is based on:\\n\\\n * https://stackoverflow.com/questions/5960757/how-to-emulate-gl-depth-clamp-nv.\\n\\\n *\\n\\\n * When GL_EXT_frag_depth is not available, which is the case on some mobile \\n\\\n * devices, we must attempt to fix this only in the vertex shader. \\n\\\n * The approach is to clamp the z value to the far plane, which closes the \\n\\\n * shadow volume but also distorts the geometry, so there can still be artifacts\\n\\\n * on frustum seams.\\n\\\n *\\n\\\n * @name czm_depthClamp\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {vec4} coords The vertex in clip coordinates.\\n\\\n * @returns {vec4} The modified vertex.\\n\\\n *\\n\\\n * @example\\n\\\n * gl_Position = czm_depthClamp(czm_modelViewProjection * vec4(position, 1.0));\\n\\\n *\\n\\\n * @see czm_writeDepthClamp\\n\\\n */\\n\\\nvec4 czm_depthClamp(vec4 coords)\\n\\\n{\\n\\\n#ifndef LOG_DEPTH\\n\\\n#ifdef GL_EXT_frag_depth\\n\\\n    v_WindowZ = (0.5 * (coords.z / coords.w) + 0.5) * coords.w;\\n\\\n    coords.z = 0.0;\\n\\\n#else\\n\\\n    coords.z = min(coords.z, coords.w);\\n\\\n#endif\\n\\\n#endif\\n\\\n    return coords;\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"8bd5197d52723f2a26dc0af9ebbb1af2","cacheData":{"env":{}}}