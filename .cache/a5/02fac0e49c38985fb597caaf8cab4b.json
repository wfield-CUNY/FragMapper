{"id":"node_modules/cesium/Source/Core/TerrainData.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416},{"name":"./DeveloperError.js","loc":{"line":1,"column":27},"parent":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\Source\\Core\\TerrainData.js","resolved":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\Source\\Core\\DeveloperError.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _DeveloperError = _interopRequireDefault(require(\"./DeveloperError.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Terrain data for a single tile.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias TerrainData\n * @constructor\n *\n * @see HeightmapTerrainData\n * @see QuantizedMeshTerrainData\n * @see GoogleEarthEnterpriseTerrainData\n */\nfunction TerrainData() {\n  _DeveloperError.default.throwInstantiationError();\n}\n\nObject.defineProperties(TerrainData.prototype, {\n  /**\n   * An array of credits for this tile.\n   * @memberof TerrainData.prototype\n   * @type {Credit[]}\n   */\n  credits: {\n    get: _DeveloperError.default.throwInstantiationError\n  },\n\n  /**\n   * The water mask included in this terrain data, if any.  A water mask is a rectangular\n   * Uint8Array or image where a value of 255 indicates water and a value of 0 indicates land.\n   * Values in between 0 and 255 are allowed as well to smoothly blend between land and water.\n   * @memberof TerrainData.prototype\n   * @type {Uint8Array|HTMLImageElement|HTMLCanvasElement}\n   */\n  waterMask: {\n    get: _DeveloperError.default.throwInstantiationError\n  }\n});\n/**\n * Computes the terrain height at a specified longitude and latitude.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle covered by this terrain data.\n * @param {Number} longitude The longitude in radians.\n * @param {Number} latitude The latitude in radians.\n * @returns {Number} The terrain height at the specified position.  If the position\n *          is outside the rectangle, this method will extrapolate the height, which is likely to be wildly\n *          incorrect for positions far outside the rectangle.\n */\n\nTerrainData.prototype.interpolateHeight = _DeveloperError.default.throwInstantiationError;\n/**\n * Determines if a given child tile is available, based on the\n * {@link TerrainData#childTileMask}.  The given child tile coordinates are assumed\n * to be one of the four children of this tile.  If non-child tile coordinates are\n * given, the availability of the southeast child tile is returned.\n * @function\n *\n * @param {Number} thisX The tile X coordinate of this (the parent) tile.\n * @param {Number} thisY The tile Y coordinate of this (the parent) tile.\n * @param {Number} childX The tile X coordinate of the child tile to check for availability.\n * @param {Number} childY The tile Y coordinate of the child tile to check for availability.\n * @returns {Boolean} True if the child tile is available; otherwise, false.\n */\n\nTerrainData.prototype.isChildAvailable = _DeveloperError.default.throwInstantiationError;\n/**\n * Creates a {@link TerrainMesh} from this terrain data.\n * @function\n *\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {TilingScheme} options.tilingScheme The tiling scheme to which this tile belongs.\n * @param {Number} options.x The X coordinate of the tile for which to create the terrain data.\n * @param {Number} options.y The Y coordinate of the tile for which to create the terrain data.\n * @param {Number} options.level The level of the tile for which to create the terrain data.\n * @param {Number} [options.exaggeration=1.0] The scale used to exaggerate the terrain.\n * @param {Number} [options.exaggerationRelativeHeight=0.0] The height relative to which terrain is exaggerated.\n * @param {Boolean} [options.throttle=true] If true, indicates that this operation will need to be retried if too many asynchronous mesh creations are already in progress.\n * @returns {Promise.<TerrainMesh>|undefined} A promise for the terrain mesh, or undefined if too many\n *          asynchronous mesh creations are already in progress and the operation should\n *          be retried later.\n */\n\nTerrainData.prototype.createMesh = _DeveloperError.default.throwInstantiationError;\n/**\n * Upsamples this terrain data for use by a descendant tile.\n * @function\n *\n * @param {TilingScheme} tilingScheme The tiling scheme of this terrain data.\n * @param {Number} thisX The X coordinate of this tile in the tiling scheme.\n * @param {Number} thisY The Y coordinate of this tile in the tiling scheme.\n * @param {Number} thisLevel The level of this tile in the tiling scheme.\n * @param {Number} descendantX The X coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantY The Y coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantLevel The level within the tiling scheme of the descendant tile for which we are upsampling.\n * @returns {Promise.<TerrainData>|undefined} A promise for upsampled terrain data for the descendant tile,\n *          or undefined if too many asynchronous upsample operations are in progress and the request has been\n *          deferred.\n */\n\nTerrainData.prototype.upsample = _DeveloperError.default.throwInstantiationError;\n/**\n * Gets a value indicating whether or not this terrain data was created by upsampling lower resolution\n * terrain data.  If this value is false, the data was obtained from some other source, such\n * as by downloading it from a remote server.  This method should return true for instances\n * returned from a call to {@link TerrainData#upsample}.\n * @function\n *\n * @returns {Boolean} True if this instance was created by upsampling; otherwise, false.\n */\n\nTerrainData.prototype.wasCreatedByUpsampling = _DeveloperError.default.throwInstantiationError;\n/**\n * The maximum number of asynchronous tasks used for terrain processing.\n *\n * @type {Number}\n * @private\n */\n\nTerrainData.maximumAsynchronousTasks = 5;\nvar _default = TerrainData;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":3,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":14,"column":0}},{"name":"TerrainData","generated":{"line":23,"column":9},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":14,"column":9}},{"generated":{"line":23,"column":20},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":14,"column":0}},{"generated":{"line":23,"column":23},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":14,"column":23}},{"name":"DeveloperError","generated":{"line":24,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":15,"column":2}},{"name":"throwInstantiationError","generated":{"line":24,"column":26},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":15,"column":17}},{"generated":{"line":24,"column":49},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":15,"column":2}},{"generated":{"line":25,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":16,"column":1}},{"name":"Object","generated":{"line":27,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":0}},{"generated":{"line":27,"column":6},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":6}},{"name":"defineProperties","generated":{"line":27,"column":7},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":7}},{"generated":{"line":27,"column":23},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":0}},{"name":"TerrainData","generated":{"line":27,"column":24},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":24}},{"generated":{"line":27,"column":35},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":35}},{"name":"prototype","generated":{"line":27,"column":36},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":36}},{"generated":{"line":27,"column":45},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":0}},{"generated":{"line":27,"column":47},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":47}},{"generated":{"line":28,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":19,"column":2}},{"name":"credits","generated":{"line":33,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":24,"column":2}},{"name":"credits","generated":{"line":33,"column":2},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":24,"column":2}},{"generated":{"line":33,"column":9},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":24,"column":9}},{"generated":{"line":33,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":24,"column":11}},{"name":"get","generated":{"line":34,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":25,"column":4}},{"name":"get","generated":{"line":34,"column":4},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":25,"column":4}},{"generated":{"line":34,"column":7},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":25,"column":7}},{"name":"DeveloperError","generated":{"line":34,"column":9},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":25,"column":9}},{"name":"throwInstantiationError","generated":{"line":34,"column":33},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":25,"column":24}},{"generated":{"line":35,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":24,"column":11}},{"generated":{"line":35,"column":3},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":47}},{"generated":{"line":37,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":27,"column":2}},{"name":"waterMask","generated":{"line":44,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":34,"column":2}},{"name":"waterMask","generated":{"line":44,"column":2},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":34,"column":2}},{"generated":{"line":44,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":34,"column":11}},{"generated":{"line":44,"column":13},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":34,"column":13}},{"name":"get","generated":{"line":45,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":35,"column":4}},{"name":"get","generated":{"line":45,"column":4},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":35,"column":4}},{"generated":{"line":45,"column":7},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":35,"column":7}},{"name":"DeveloperError","generated":{"line":45,"column":9},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":35,"column":9}},{"name":"throwInstantiationError","generated":{"line":45,"column":33},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":35,"column":24}},{"generated":{"line":46,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":34,"column":13}},{"generated":{"line":47,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":47}},{"generated":{"line":47,"column":1},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":18,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":39,"column":0}},{"name":"TerrainData","generated":{"line":60,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":50,"column":0}},{"generated":{"line":60,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":50,"column":11}},{"name":"prototype","generated":{"line":60,"column":12},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":50,"column":12}},{"generated":{"line":60,"column":21},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":50,"column":0}},{"name":"interpolateHeight","generated":{"line":60,"column":22},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":50,"column":22}},{"generated":{"line":60,"column":39},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":50,"column":0}},{"name":"DeveloperError","generated":{"line":60,"column":42},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":51,"column":2}},{"name":"throwInstantiationError","generated":{"line":60,"column":66},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":51,"column":17}},{"generated":{"line":60,"column":89},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":50,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":53,"column":0}},{"name":"TerrainData","generated":{"line":75,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":0}},{"generated":{"line":75,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":11}},{"name":"prototype","generated":{"line":75,"column":12},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":12}},{"generated":{"line":75,"column":21},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":0}},{"name":"isChildAvailable","generated":{"line":75,"column":22},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":22}},{"generated":{"line":75,"column":38},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":0}},{"name":"DeveloperError","generated":{"line":75,"column":41},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":41}},{"name":"throwInstantiationError","generated":{"line":75,"column":65},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":56}},{"generated":{"line":75,"column":88},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":66,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":68,"column":0}},{"name":"TerrainData","generated":{"line":95,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":0}},{"generated":{"line":95,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":11}},{"name":"prototype","generated":{"line":95,"column":12},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":12}},{"generated":{"line":95,"column":21},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":0}},{"name":"createMesh","generated":{"line":95,"column":22},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":22}},{"generated":{"line":95,"column":32},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":0}},{"name":"DeveloperError","generated":{"line":95,"column":35},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":35}},{"name":"throwInstantiationError","generated":{"line":95,"column":59},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":50}},{"generated":{"line":95,"column":82},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":86,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":88,"column":0}},{"name":"TerrainData","generated":{"line":112,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":0}},{"generated":{"line":112,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":11}},{"name":"prototype","generated":{"line":112,"column":12},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":12}},{"generated":{"line":112,"column":21},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":0}},{"name":"upsample","generated":{"line":112,"column":22},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":22}},{"generated":{"line":112,"column":30},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":0}},{"name":"DeveloperError","generated":{"line":112,"column":33},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":33}},{"name":"throwInstantiationError","generated":{"line":112,"column":57},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":48}},{"generated":{"line":112,"column":80},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":103,"column":0}},{"generated":{"line":113,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":105,"column":0}},{"name":"TerrainData","generated":{"line":123,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":114,"column":0}},{"generated":{"line":123,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":114,"column":11}},{"name":"prototype","generated":{"line":123,"column":12},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":114,"column":12}},{"generated":{"line":123,"column":21},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":114,"column":0}},{"name":"wasCreatedByUpsampling","generated":{"line":123,"column":22},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":114,"column":22}},{"generated":{"line":123,"column":44},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":114,"column":0}},{"name":"DeveloperError","generated":{"line":123,"column":47},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":115,"column":2}},{"name":"throwInstantiationError","generated":{"line":123,"column":71},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":115,"column":17}},{"generated":{"line":123,"column":94},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":114,"column":0}},{"generated":{"line":124,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":117,"column":0}},{"name":"TerrainData","generated":{"line":131,"column":0},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":123,"column":0}},{"generated":{"line":131,"column":11},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":123,"column":11}},{"name":"maximumAsynchronousTasks","generated":{"line":131,"column":12},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":123,"column":12}},{"generated":{"line":131,"column":36},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":123,"column":0}},{"generated":{"line":131,"column":39},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":123,"column":39}},{"generated":{"line":131,"column":40},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":123,"column":0}},{"name":"TerrainData","generated":{"line":132,"column":15},"source":"node_modules/cesium/Source/Core/TerrainData.js","original":{"line":125,"column":15}}],"sources":{"node_modules/cesium/Source/Core/TerrainData.js":"import DeveloperError from \"./DeveloperError.js\";\n\n/**\n * Terrain data for a single tile.  This type describes an\n * interface and is not intended to be instantiated directly.\n *\n * @alias TerrainData\n * @constructor\n *\n * @see HeightmapTerrainData\n * @see QuantizedMeshTerrainData\n * @see GoogleEarthEnterpriseTerrainData\n */\nfunction TerrainData() {\n  DeveloperError.throwInstantiationError();\n}\n\nObject.defineProperties(TerrainData.prototype, {\n  /**\n   * An array of credits for this tile.\n   * @memberof TerrainData.prototype\n   * @type {Credit[]}\n   */\n  credits: {\n    get: DeveloperError.throwInstantiationError,\n  },\n  /**\n   * The water mask included in this terrain data, if any.  A water mask is a rectangular\n   * Uint8Array or image where a value of 255 indicates water and a value of 0 indicates land.\n   * Values in between 0 and 255 are allowed as well to smoothly blend between land and water.\n   * @memberof TerrainData.prototype\n   * @type {Uint8Array|HTMLImageElement|HTMLCanvasElement}\n   */\n  waterMask: {\n    get: DeveloperError.throwInstantiationError,\n  },\n});\n\n/**\n * Computes the terrain height at a specified longitude and latitude.\n * @function\n *\n * @param {Rectangle} rectangle The rectangle covered by this terrain data.\n * @param {Number} longitude The longitude in radians.\n * @param {Number} latitude The latitude in radians.\n * @returns {Number} The terrain height at the specified position.  If the position\n *          is outside the rectangle, this method will extrapolate the height, which is likely to be wildly\n *          incorrect for positions far outside the rectangle.\n */\nTerrainData.prototype.interpolateHeight =\n  DeveloperError.throwInstantiationError;\n\n/**\n * Determines if a given child tile is available, based on the\n * {@link TerrainData#childTileMask}.  The given child tile coordinates are assumed\n * to be one of the four children of this tile.  If non-child tile coordinates are\n * given, the availability of the southeast child tile is returned.\n * @function\n *\n * @param {Number} thisX The tile X coordinate of this (the parent) tile.\n * @param {Number} thisY The tile Y coordinate of this (the parent) tile.\n * @param {Number} childX The tile X coordinate of the child tile to check for availability.\n * @param {Number} childY The tile Y coordinate of the child tile to check for availability.\n * @returns {Boolean} True if the child tile is available; otherwise, false.\n */\nTerrainData.prototype.isChildAvailable = DeveloperError.throwInstantiationError;\n\n/**\n * Creates a {@link TerrainMesh} from this terrain data.\n * @function\n *\n * @private\n *\n * @param {Object} options Object with the following properties:\n * @param {TilingScheme} options.tilingScheme The tiling scheme to which this tile belongs.\n * @param {Number} options.x The X coordinate of the tile for which to create the terrain data.\n * @param {Number} options.y The Y coordinate of the tile for which to create the terrain data.\n * @param {Number} options.level The level of the tile for which to create the terrain data.\n * @param {Number} [options.exaggeration=1.0] The scale used to exaggerate the terrain.\n * @param {Number} [options.exaggerationRelativeHeight=0.0] The height relative to which terrain is exaggerated.\n * @param {Boolean} [options.throttle=true] If true, indicates that this operation will need to be retried if too many asynchronous mesh creations are already in progress.\n * @returns {Promise.<TerrainMesh>|undefined} A promise for the terrain mesh, or undefined if too many\n *          asynchronous mesh creations are already in progress and the operation should\n *          be retried later.\n */\nTerrainData.prototype.createMesh = DeveloperError.throwInstantiationError;\n\n/**\n * Upsamples this terrain data for use by a descendant tile.\n * @function\n *\n * @param {TilingScheme} tilingScheme The tiling scheme of this terrain data.\n * @param {Number} thisX The X coordinate of this tile in the tiling scheme.\n * @param {Number} thisY The Y coordinate of this tile in the tiling scheme.\n * @param {Number} thisLevel The level of this tile in the tiling scheme.\n * @param {Number} descendantX The X coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantY The Y coordinate within the tiling scheme of the descendant tile for which we are upsampling.\n * @param {Number} descendantLevel The level within the tiling scheme of the descendant tile for which we are upsampling.\n * @returns {Promise.<TerrainData>|undefined} A promise for upsampled terrain data for the descendant tile,\n *          or undefined if too many asynchronous upsample operations are in progress and the request has been\n *          deferred.\n */\nTerrainData.prototype.upsample = DeveloperError.throwInstantiationError;\n\n/**\n * Gets a value indicating whether or not this terrain data was created by upsampling lower resolution\n * terrain data.  If this value is false, the data was obtained from some other source, such\n * as by downloading it from a remote server.  This method should return true for instances\n * returned from a call to {@link TerrainData#upsample}.\n * @function\n *\n * @returns {Boolean} True if this instance was created by upsampling; otherwise, false.\n */\nTerrainData.prototype.wasCreatedByUpsampling =\n  DeveloperError.throwInstantiationError;\n\n/**\n * The maximum number of asynchronous tasks used for terrain processing.\n *\n * @type {Number}\n * @private\n */\nTerrainData.maximumAsynchronousTasks = 5;\n\nexport default TerrainData;\n"},"lineCount":null}},"error":null,"hash":"d643899e4b0ae35dd0975671da7585d8","cacheData":{"env":{}}}