{"id":"node_modules/cesium/Source/Shaders/OctahedralProjectionAtlasFS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"varying vec2 v_textureCoordinates;\\n\\\n\\n\\\nuniform float originalSize;\\n\\\nuniform sampler2D texture0;\\n\\\nuniform sampler2D texture1;\\n\\\nuniform sampler2D texture2;\\n\\\nuniform sampler2D texture3;\\n\\\nuniform sampler2D texture4;\\n\\\nuniform sampler2D texture5;\\n\\\n\\n\\\nconst float yMipLevel1 = 1.0 - (1.0 / pow(2.0, 1.0));\\n\\\nconst float yMipLevel2 = 1.0 - (1.0 / pow(2.0, 2.0));\\n\\\nconst float yMipLevel3 = 1.0 - (1.0 / pow(2.0, 3.0));\\n\\\nconst float yMipLevel4 = 1.0 - (1.0 / pow(2.0, 4.0));\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec2 uv = v_textureCoordinates;\\n\\\n    vec2 textureSize = vec2(originalSize * 1.5 + 2.0, originalSize);\\n\\\n    vec2 pixel = 1.0 / textureSize;\\n\\\n\\n\\\n    float mipLevel = 0.0;\\n\\\n\\n\\\n    if (uv.x - pixel.x > (textureSize.y / textureSize.x))\\n\\\n    {\\n\\\n        mipLevel = 1.0;\\n\\\n        if (uv.y - pixel.y > yMipLevel1)\\n\\\n        {\\n\\\n            mipLevel = 2.0;\\n\\\n            if (uv.y - pixel.y * 3.0 > yMipLevel2)\\n\\\n            {\\n\\\n                mipLevel = 3.0;\\n\\\n                if (uv.y - pixel.y * 5.0 > yMipLevel3)\\n\\\n                {\\n\\\n                    mipLevel = 4.0;\\n\\\n                    if (uv.y - pixel.y * 7.0 > yMipLevel4)\\n\\\n                    {\\n\\\n                        mipLevel = 5.0;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    if (mipLevel > 0.0)\\n\\\n    {\\n\\\n        float scale = pow(2.0, mipLevel);\\n\\\n\\n\\\n        uv.y -= (pixel.y * (mipLevel - 1.0) * 2.0);\\n\\\n        uv.x *= ((textureSize.x - 2.0) / textureSize.y);\\n\\\n\\n\\\n        uv.x -= 1.0 + pixel.x;\\n\\\n        uv.y -= (1.0 - (1.0 / pow(2.0, mipLevel - 1.0)));\\n\\\n        uv *= scale;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        uv.x *= (textureSize.x / textureSize.y);\\n\\\n    }\\n\\\n\\n\\\n    if(mipLevel == 0.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture0, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 1.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture1, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 2.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture2, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 3.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture3, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 4.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture4, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 5.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture5, uv);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        gl_FragColor = vec4(0.0);\\n\\\n    }\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/OctahedralProjectionAtlasFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/OctahedralProjectionAtlasFS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/OctahedralProjectionAtlasFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"varying vec2 v_textureCoordinates;\\n\\\n\\n\\\nuniform float originalSize;\\n\\\nuniform sampler2D texture0;\\n\\\nuniform sampler2D texture1;\\n\\\nuniform sampler2D texture2;\\n\\\nuniform sampler2D texture3;\\n\\\nuniform sampler2D texture4;\\n\\\nuniform sampler2D texture5;\\n\\\n\\n\\\nconst float yMipLevel1 = 1.0 - (1.0 / pow(2.0, 1.0));\\n\\\nconst float yMipLevel2 = 1.0 - (1.0 / pow(2.0, 2.0));\\n\\\nconst float yMipLevel3 = 1.0 - (1.0 / pow(2.0, 3.0));\\n\\\nconst float yMipLevel4 = 1.0 - (1.0 / pow(2.0, 4.0));\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec2 uv = v_textureCoordinates;\\n\\\n    vec2 textureSize = vec2(originalSize * 1.5 + 2.0, originalSize);\\n\\\n    vec2 pixel = 1.0 / textureSize;\\n\\\n\\n\\\n    float mipLevel = 0.0;\\n\\\n\\n\\\n    if (uv.x - pixel.x > (textureSize.y / textureSize.x))\\n\\\n    {\\n\\\n        mipLevel = 1.0;\\n\\\n        if (uv.y - pixel.y > yMipLevel1)\\n\\\n        {\\n\\\n            mipLevel = 2.0;\\n\\\n            if (uv.y - pixel.y * 3.0 > yMipLevel2)\\n\\\n            {\\n\\\n                mipLevel = 3.0;\\n\\\n                if (uv.y - pixel.y * 5.0 > yMipLevel3)\\n\\\n                {\\n\\\n                    mipLevel = 4.0;\\n\\\n                    if (uv.y - pixel.y * 7.0 > yMipLevel4)\\n\\\n                    {\\n\\\n                        mipLevel = 5.0;\\n\\\n                    }\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    if (mipLevel > 0.0)\\n\\\n    {\\n\\\n        float scale = pow(2.0, mipLevel);\\n\\\n\\n\\\n        uv.y -= (pixel.y * (mipLevel - 1.0) * 2.0);\\n\\\n        uv.x *= ((textureSize.x - 2.0) / textureSize.y);\\n\\\n\\n\\\n        uv.x -= 1.0 + pixel.x;\\n\\\n        uv.y -= (1.0 - (1.0 / pow(2.0, mipLevel - 1.0)));\\n\\\n        uv *= scale;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        uv.x *= (textureSize.x / textureSize.y);\\n\\\n    }\\n\\\n\\n\\\n    if(mipLevel == 0.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture0, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 1.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture1, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 2.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture2, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 3.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture3, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 4.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture4, uv);\\n\\\n    }\\n\\\n    else if(mipLevel == 5.0)\\n\\\n    {\\n\\\n        gl_FragColor = texture2D(texture5, uv);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        gl_FragColor = vec4(0.0);\\n\\\n    }\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"4bcdcfc2f40d0e52ecf0901907ad4c3f","cacheData":{"env":{}}}