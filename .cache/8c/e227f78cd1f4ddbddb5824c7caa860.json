{"id":"node_modules/cesium/Source/Shaders/GroundAtmosphere.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/*!\\n\\\n * Atmosphere code:\\n\\\n *\\n\\\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\\n\\\n * All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *\\n\\\n * * Redistributions of source code must retain the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer.\\n\\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer in the documentation\\n\\\n *   and/or other materials provided with the distribution.\\n\\\n * * Neither the name of the project nor the names of its contributors may be\\n\\\n *   used to endorse or promote products derived from this software without\\n\\\n *   specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n\\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n\\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\\n\\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n\\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n\\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n\\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n *\\n\\\n * Modifications made by Analytical Graphics, Inc.\\n\\\n */\\n\\\n\\n\\\n // Atmosphere:\\n\\\n //   Code:  http://sponeil.net/\\n\\\n //   GPU Gems 2 Article:  https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html\\n\\\n\\n\\\nconst float Kr = 0.0025;\\n\\\nconst float Km = 0.0015;\\n\\\nconst float ESun = 15.0;\\n\\\n\\n\\\nconst float fKrESun = Kr * ESun;\\n\\\nconst float fKmESun = Km * ESun;\\n\\\nconst float fKr4PI = Kr * 4.0 * czm_pi;\\n\\\nconst float fKm4PI = Km * 4.0 * czm_pi;\\n\\\n\\n\\\n// Original: vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));\\n\\\nconst vec3 v3InvWavelength = vec3(5.60204474633241, 9.473284437923038, 19.64380261047721);\\n\\\n\\n\\\nconst float fScaleDepth = 0.25;\\n\\\n\\n\\\nstruct AtmosphereColor\\n\\\n{\\n\\\n    vec3 mie;\\n\\\n    vec3 rayleigh;\\n\\\n};\\n\\\n\\n\\\nconst int nSamples = 2;\\n\\\nconst float fSamples = 2.0;\\n\\\n\\n\\\nfloat scale(float fCos)\\n\\\n{\\n\\\n    float x = 1.0 - fCos;\\n\\\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\n\\\n}\\n\\\n\\n\\\nAtmosphereColor computeGroundAtmosphereFromSpace(vec3 v3Pos, bool dynamicLighting, vec3 lightDirectionWC)\\n\\\n{\\n\\\n    float fInnerRadius = czm_ellipsoidRadii.x;\\n\\\n    float fOuterRadius = czm_ellipsoidRadii.x * 1.025;\\n\\\n    float fOuterRadius2 = fOuterRadius * fOuterRadius;\\n\\\n\\n\\\n    float fScale = 1.0 / (fOuterRadius - fInnerRadius);\\n\\\n    float fScaleOverScaleDepth = fScale / fScaleDepth;\\n\\\n\\n\\\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\\n\\\n    vec3 v3Ray = v3Pos - czm_viewerPositionWC;\\n\\\n    float fFar = length(v3Ray);\\n\\\n    v3Ray /= fFar;\\n\\\n\\n\\\n    float fCameraHeight = length(czm_viewerPositionWC);\\n\\\n    float fCameraHeight2 = fCameraHeight * fCameraHeight;\\n\\\n\\n\\\n    // This next line is an ANGLE workaround. It is equivalent to B = 2.0 * dot(czm_viewerPositionWC, v3Ray),\\n\\\n    // which is what it should be, but there are problems at the poles.\\n\\\n    float B = 2.0 * length(czm_viewerPositionWC) * dot(normalize(czm_viewerPositionWC), v3Ray);\\n\\\n    float C = fCameraHeight2 - fOuterRadius2;\\n\\\n    float fDet = max(0.0, B*B - 4.0 * C);\\n\\\n    float fNear = 0.5 * (-B - sqrt(fDet));\\n\\\n\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    vec3 v3Start = czm_viewerPositionWC + v3Ray * fNear;\\n\\\n    fFar -= fNear;\\n\\\n    float fDepth = exp((fInnerRadius - fOuterRadius) / fScaleDepth);\\n\\\n\\n\\\n    // The light angle based on the scene's light source would be:\\n\\\n    //    dot(lightDirectionWC, v3Pos) / length(v3Pos);\\n\\\n    // When we want the atmosphere to be uniform over the globe so it is set to 1.0.\\n\\\n\\n\\\n    float fLightAngle = czm_branchFreeTernary(dynamicLighting, dot(lightDirectionWC, v3Pos) / length(v3Pos), 1.0);\\n\\\n    float fCameraAngle = dot(-v3Ray, v3Pos) / length(v3Pos);\\n\\\n    float fCameraScale = scale(fCameraAngle);\\n\\\n    float fLightScale = scale(fLightAngle);\\n\\\n    float fCameraOffset = fDepth*fCameraScale;\\n\\\n    float fTemp = (fLightScale + fCameraScale);\\n\\\n\\n\\\n    // Initialize the scattering loop variables\\n\\\n    float fSampleLength = fFar / fSamples;\\n\\\n    float fScaledLength = fSampleLength * fScale;\\n\\\n    vec3 v3SampleRay = v3Ray * fSampleLength;\\n\\\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\\n\\\n\\n\\\n    // Now loop through the sample rays\\n\\\n    vec3 v3FrontColor = vec3(0.0);\\n\\\n    vec3 v3Attenuate = vec3(0.0);\\n\\\n    for(int i=0; i<nSamples; i++)\\n\\\n    {\\n\\\n        float fHeight = length(v3SamplePoint);\\n\\\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\\n\\\n        float fScatter = fDepth*fTemp - fCameraOffset;\\n\\\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\\n\\\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\\n\\\n        v3SamplePoint += v3SampleRay;\\n\\\n    }\\n\\\n\\n\\\n    AtmosphereColor color;\\n\\\n    color.mie = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\\n\\\n    color.rayleigh = v3Attenuate; // Calculate the attenuation factor for the ground\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/GroundAtmosphere.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/GroundAtmosphere.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/GroundAtmosphere.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/*!\\n\\\n * Atmosphere code:\\n\\\n *\\n\\\n * Copyright (c) 2000-2005, Sean O'Neil (s_p_oneil@hotmail.com)\\n\\\n * All rights reserved.\\n\\\n *\\n\\\n * Redistribution and use in source and binary forms, with or without\\n\\\n * modification, are permitted provided that the following conditions\\n\\\n * are met:\\n\\\n *\\n\\\n * * Redistributions of source code must retain the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer.\\n\\\n * * Redistributions in binary form must reproduce the above copyright notice,\\n\\\n *   this list of conditions and the following disclaimer in the documentation\\n\\\n *   and/or other materials provided with the distribution.\\n\\\n * * Neither the name of the project nor the names of its contributors may be\\n\\\n *   used to endorse or promote products derived from this software without\\n\\\n *   specific prior written permission.\\n\\\n *\\n\\\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\"\\n\\\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\\n\\\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\\n\\\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\\n\\\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\\n\\\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\\n\\\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\\n\\\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\\n\\\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\\\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\\n *\\n\\\n * Modifications made by Analytical Graphics, Inc.\\n\\\n */\\n\\\n\\n\\\n // Atmosphere:\\n\\\n //   Code:  http://sponeil.net/\\n\\\n //   GPU Gems 2 Article:  https://developer.nvidia.com/gpugems/GPUGems2/gpugems2_chapter16.html\\n\\\n\\n\\\nconst float Kr = 0.0025;\\n\\\nconst float Km = 0.0015;\\n\\\nconst float ESun = 15.0;\\n\\\n\\n\\\nconst float fKrESun = Kr * ESun;\\n\\\nconst float fKmESun = Km * ESun;\\n\\\nconst float fKr4PI = Kr * 4.0 * czm_pi;\\n\\\nconst float fKm4PI = Km * 4.0 * czm_pi;\\n\\\n\\n\\\n// Original: vec3(1.0 / pow(0.650, 4.0), 1.0 / pow(0.570, 4.0), 1.0 / pow(0.475, 4.0));\\n\\\nconst vec3 v3InvWavelength = vec3(5.60204474633241, 9.473284437923038, 19.64380261047721);\\n\\\n\\n\\\nconst float fScaleDepth = 0.25;\\n\\\n\\n\\\nstruct AtmosphereColor\\n\\\n{\\n\\\n    vec3 mie;\\n\\\n    vec3 rayleigh;\\n\\\n};\\n\\\n\\n\\\nconst int nSamples = 2;\\n\\\nconst float fSamples = 2.0;\\n\\\n\\n\\\nfloat scale(float fCos)\\n\\\n{\\n\\\n    float x = 1.0 - fCos;\\n\\\n    return fScaleDepth * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\\n\\\n}\\n\\\n\\n\\\nAtmosphereColor computeGroundAtmosphereFromSpace(vec3 v3Pos, bool dynamicLighting, vec3 lightDirectionWC)\\n\\\n{\\n\\\n    float fInnerRadius = czm_ellipsoidRadii.x;\\n\\\n    float fOuterRadius = czm_ellipsoidRadii.x * 1.025;\\n\\\n    float fOuterRadius2 = fOuterRadius * fOuterRadius;\\n\\\n\\n\\\n    float fScale = 1.0 / (fOuterRadius - fInnerRadius);\\n\\\n    float fScaleOverScaleDepth = fScale / fScaleDepth;\\n\\\n\\n\\\n    // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\\n\\\n    vec3 v3Ray = v3Pos - czm_viewerPositionWC;\\n\\\n    float fFar = length(v3Ray);\\n\\\n    v3Ray /= fFar;\\n\\\n\\n\\\n    float fCameraHeight = length(czm_viewerPositionWC);\\n\\\n    float fCameraHeight2 = fCameraHeight * fCameraHeight;\\n\\\n\\n\\\n    // This next line is an ANGLE workaround. It is equivalent to B = 2.0 * dot(czm_viewerPositionWC, v3Ray),\\n\\\n    // which is what it should be, but there are problems at the poles.\\n\\\n    float B = 2.0 * length(czm_viewerPositionWC) * dot(normalize(czm_viewerPositionWC), v3Ray);\\n\\\n    float C = fCameraHeight2 - fOuterRadius2;\\n\\\n    float fDet = max(0.0, B*B - 4.0 * C);\\n\\\n    float fNear = 0.5 * (-B - sqrt(fDet));\\n\\\n\\n\\\n    // Calculate the ray's starting position, then calculate its scattering offset\\n\\\n    vec3 v3Start = czm_viewerPositionWC + v3Ray * fNear;\\n\\\n    fFar -= fNear;\\n\\\n    float fDepth = exp((fInnerRadius - fOuterRadius) / fScaleDepth);\\n\\\n\\n\\\n    // The light angle based on the scene's light source would be:\\n\\\n    //    dot(lightDirectionWC, v3Pos) / length(v3Pos);\\n\\\n    // When we want the atmosphere to be uniform over the globe so it is set to 1.0.\\n\\\n\\n\\\n    float fLightAngle = czm_branchFreeTernary(dynamicLighting, dot(lightDirectionWC, v3Pos) / length(v3Pos), 1.0);\\n\\\n    float fCameraAngle = dot(-v3Ray, v3Pos) / length(v3Pos);\\n\\\n    float fCameraScale = scale(fCameraAngle);\\n\\\n    float fLightScale = scale(fLightAngle);\\n\\\n    float fCameraOffset = fDepth*fCameraScale;\\n\\\n    float fTemp = (fLightScale + fCameraScale);\\n\\\n\\n\\\n    // Initialize the scattering loop variables\\n\\\n    float fSampleLength = fFar / fSamples;\\n\\\n    float fScaledLength = fSampleLength * fScale;\\n\\\n    vec3 v3SampleRay = v3Ray * fSampleLength;\\n\\\n    vec3 v3SamplePoint = v3Start + v3SampleRay * 0.5;\\n\\\n\\n\\\n    // Now loop through the sample rays\\n\\\n    vec3 v3FrontColor = vec3(0.0);\\n\\\n    vec3 v3Attenuate = vec3(0.0);\\n\\\n    for(int i=0; i<nSamples; i++)\\n\\\n    {\\n\\\n        float fHeight = length(v3SamplePoint);\\n\\\n        float fDepth = exp(fScaleOverScaleDepth * (fInnerRadius - fHeight));\\n\\\n        float fScatter = fDepth*fTemp - fCameraOffset;\\n\\\n        v3Attenuate = exp(-fScatter * (v3InvWavelength * fKr4PI + fKm4PI));\\n\\\n        v3FrontColor += v3Attenuate * (fDepth * fScaledLength);\\n\\\n        v3SamplePoint += v3SampleRay;\\n\\\n    }\\n\\\n\\n\\\n    AtmosphereColor color;\\n\\\n    color.mie = v3FrontColor * (v3InvWavelength * fKrESun + fKmESun);\\n\\\n    color.rayleigh = v3Attenuate; // Calculate the attenuation factor for the ground\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"1149cc6fb279b64ad3d24919acfb7ef9","cacheData":{"env":{}}}