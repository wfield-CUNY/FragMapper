{"id":"node_modules/cesium/Source/Shaders/BillboardCollectionFS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"#ifdef GL_OES_standard_derivatives\\n\\\n#extension GL_OES_standard_derivatives : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform sampler2D u_atlas;\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\nuniform vec4 u_highlightColor;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;                  // the min and max x and y values for the texture coordinates\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;      // texture coordinate at the origin, billboard translate (used for label glyphs)\\n\\\nvarying vec4 v_compressed;                               // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nfloat getGlobeDepth(vec2 adjustedST, vec2 depthLookupST, bool applyTranslate, vec2 dimensions, vec2 imageSize)\\n\\\n{\\n\\\n    vec2 lookupVector = imageSize * (depthLookupST - adjustedST);\\n\\\n    lookupVector = v_rotationMatrix * lookupVector;\\n\\\n    vec2 labelOffset = (dimensions - imageSize) * (depthLookupST - vec2(0.0, v_originTextureCoordinateAndTranslate.y)); // aligns label glyph with bounding rectangle.  Will be zero for billboards because dimensions and imageSize will be equal\\n\\\n\\n\\\n    vec2 translation = v_originTextureCoordinateAndTranslate.zw;\\n\\\n\\n\\\n    if (applyTranslate)\\n\\\n    {\\n\\\n        // this is only needed for labels where the horizontal origin is not LEFT\\n\\\n        // it moves the label back to where the \\\"origin\\\" should be since all label glyphs are set to HorizontalOrigin.LEFT\\n\\\n        translation += (dimensions * v_originTextureCoordinateAndTranslate.xy * vec2(1.0, 0.0));\\n\\\n    }\\n\\\n\\n\\\n    vec2 st = ((lookupVector - translation + labelOffset) + gl_FragCoord.xy) / czm_viewport.zw;\\n\\\n    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, st));\\n\\\n\\n\\\n    if (logDepthOrDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n\\n\\\n#ifdef SDF\\n\\\n\\n\\\n// Get the distance from the edge of a glyph at a given position sampling an SDF texture.\\n\\\nfloat getDistance(vec2 position)\\n\\\n{\\n\\\n    return texture2D(u_atlas, position).r;\\n\\\n}\\n\\\n\\n\\\n// Samples the sdf texture at the given position and produces a color based on the fill color and the outline.\\n\\\nvec4 getSDFColor(vec2 position, float outlineWidth, vec4 outlineColor, float smoothing)\\n\\\n{\\n\\\n    float distance = getDistance(position);\\n\\\n\\n\\\n    if (outlineWidth > 0.0)\\n\\\n    {\\n\\\n        // Don't get the outline edge exceed the SDF_EDGE\\n\\\n        float outlineEdge = clamp(SDF_EDGE - outlineWidth, 0.0, SDF_EDGE);\\n\\\n        float outlineFactor = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        vec4 sdfColor = mix(outlineColor, v_color, outlineFactor);\\n\\\n        float alpha = smoothstep(outlineEdge - smoothing, outlineEdge + smoothing, distance);\\n\\\n        return vec4(sdfColor.rgb, sdfColor.a * alpha);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float alpha = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        return vec4(v_color.rgb, v_color.a * alpha);\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(u_atlas, v_textureCoordinates);\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    float outlineWidth = v_outlineWidth;\\n\\\n    vec4 outlineColor = v_outlineColor;\\n\\\n\\n\\\n    // Get the current distance\\n\\\n    float distance = getDistance(v_textureCoordinates);\\n\\\n\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    float smoothing = fwidth(distance);\\n\\\n    // Get an offset that is approximately half the distance to the neighbor pixels\\n\\\n    // 0.354 is approximately half of 1/sqrt(2)\\n\\\n    vec2 sampleOffset = 0.354 * vec2(dFdx(v_textureCoordinates) + dFdy(v_textureCoordinates));\\n\\\n\\n\\\n    // Sample the center point\\n\\\n    vec4 center = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Sample the 4 neighbors\\n\\\n    vec4 color1 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color2 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color3 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color4 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Equally weight the center sample and the 4 neighboring samples\\n\\\n    color = (center + color1 + color2 + color3 + color4)/5.0;\\n\\\n#else\\n\\\n    // Just do a single sample\\n\\\n    float smoothing = 1.0/32.0;\\n\\\n    color = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n#endif\\n\\\n\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n#else\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n    color *= czm_gammaCorrect(v_color);\\n\\\n#endif\\n\\\n\\n\\\n// Fully transparent parts of the billboard are not pickable.\\n\\\n#if !defined(OPAQUE) && !defined(TRANSLUCENT)\\n\\\n    if (color.a < 0.005)   // matches 0/255 and 1/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n// The billboard is rendered twice. The opaque pass discards translucent fragments\\n\\\n// and the translucent pass discards opaque fragments.\\n\\\n#ifdef OPAQUE\\n\\\n    if (color.a < 0.995)   // matches < 254/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n    if (color.a >= 0.995)  // matches 254/255 and 255/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\n    color *= u_highlightColor;\\n\\\n#endif\\n\\\n    gl_FragColor = color;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float temp = v_compressed.y;\\n\\\n\\n\\\n    temp = temp * SHIFT_RIGHT1;\\n\\\n\\n\\\n    float temp2 = (temp - floor(temp)) * SHIFT_LEFT1;\\n\\\n    bool enableDepthTest = temp2 != 0.0;\\n\\\n    bool applyTranslate = floor(temp) != 0.0;\\n\\\n\\n\\\n    if (enableDepthTest) {\\n\\\n        temp = v_compressed.z;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 dimensions;\\n\\\n        dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        dimensions.x = floor(temp);\\n\\\n\\n\\\n        temp = v_compressed.w;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 imageSize;\\n\\\n        imageSize.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        imageSize.x = floor(temp);\\n\\\n\\n\\\n        vec2 adjustedST = v_textureCoordinates - v_textureCoordinateBounds.xy;\\n\\\n        adjustedST = adjustedST / vec2(v_textureCoordinateBounds.z - v_textureCoordinateBounds.x, v_textureCoordinateBounds.w - v_textureCoordinateBounds.y);\\n\\\n\\n\\\n        float epsilonEyeDepth = v_compressed.x + czm_epsilon1;\\n\\\n        float globeDepth1 = getGlobeDepth(adjustedST, v_originTextureCoordinateAndTranslate.xy, applyTranslate, dimensions, imageSize);\\n\\\n\\n\\\n        // negative values go into the screen\\n\\\n        if (globeDepth1 != 0.0 && globeDepth1 > epsilonEyeDepth)\\n\\\n        {\\n\\\n            float globeDepth2 = getGlobeDepth(adjustedST, vec2(0.0, 1.0), applyTranslate, dimensions, imageSize); // top left corner\\n\\\n            if (globeDepth2 != 0.0 && globeDepth2 > epsilonEyeDepth)\\n\\\n            {\\n\\\n                float globeDepth3 = getGlobeDepth(adjustedST, vec2(1.0, 1.0), applyTranslate, dimensions, imageSize); // top right corner\\n\\\n                if (globeDepth3 != 0.0 && globeDepth3 > epsilonEyeDepth)\\n\\\n                {\\n\\\n                    discard;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/BillboardCollectionFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/BillboardCollectionFS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/BillboardCollectionFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef GL_OES_standard_derivatives\\n\\\n#extension GL_OES_standard_derivatives : enable\\n\\\n#endif\\n\\\n\\n\\\nuniform sampler2D u_atlas;\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\nuniform vec4 u_highlightColor;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;                  // the min and max x and y values for the texture coordinates\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;      // texture coordinate at the origin, billboard translate (used for label glyphs)\\n\\\nvarying vec4 v_compressed;                               // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nfloat getGlobeDepth(vec2 adjustedST, vec2 depthLookupST, bool applyTranslate, vec2 dimensions, vec2 imageSize)\\n\\\n{\\n\\\n    vec2 lookupVector = imageSize * (depthLookupST - adjustedST);\\n\\\n    lookupVector = v_rotationMatrix * lookupVector;\\n\\\n    vec2 labelOffset = (dimensions - imageSize) * (depthLookupST - vec2(0.0, v_originTextureCoordinateAndTranslate.y)); // aligns label glyph with bounding rectangle.  Will be zero for billboards because dimensions and imageSize will be equal\\n\\\n\\n\\\n    vec2 translation = v_originTextureCoordinateAndTranslate.zw;\\n\\\n\\n\\\n    if (applyTranslate)\\n\\\n    {\\n\\\n        // this is only needed for labels where the horizontal origin is not LEFT\\n\\\n        // it moves the label back to where the \\\"origin\\\" should be since all label glyphs are set to HorizontalOrigin.LEFT\\n\\\n        translation += (dimensions * v_originTextureCoordinateAndTranslate.xy * vec2(1.0, 0.0));\\n\\\n    }\\n\\\n\\n\\\n    vec2 st = ((lookupVector - translation + labelOffset) + gl_FragCoord.xy) / czm_viewport.zw;\\n\\\n    float logDepthOrDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, st));\\n\\\n\\n\\\n    if (logDepthOrDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(gl_FragCoord.xy, logDepthOrDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n\\n\\\n#ifdef SDF\\n\\\n\\n\\\n// Get the distance from the edge of a glyph at a given position sampling an SDF texture.\\n\\\nfloat getDistance(vec2 position)\\n\\\n{\\n\\\n    return texture2D(u_atlas, position).r;\\n\\\n}\\n\\\n\\n\\\n// Samples the sdf texture at the given position and produces a color based on the fill color and the outline.\\n\\\nvec4 getSDFColor(vec2 position, float outlineWidth, vec4 outlineColor, float smoothing)\\n\\\n{\\n\\\n    float distance = getDistance(position);\\n\\\n\\n\\\n    if (outlineWidth > 0.0)\\n\\\n    {\\n\\\n        // Don't get the outline edge exceed the SDF_EDGE\\n\\\n        float outlineEdge = clamp(SDF_EDGE - outlineWidth, 0.0, SDF_EDGE);\\n\\\n        float outlineFactor = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        vec4 sdfColor = mix(outlineColor, v_color, outlineFactor);\\n\\\n        float alpha = smoothstep(outlineEdge - smoothing, outlineEdge + smoothing, distance);\\n\\\n        return vec4(sdfColor.rgb, sdfColor.a * alpha);\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        float alpha = smoothstep(SDF_EDGE - smoothing, SDF_EDGE + smoothing, distance);\\n\\\n        return vec4(v_color.rgb, v_color.a * alpha);\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\nvoid main()\\n\\\n{\\n\\\n    vec4 color = texture2D(u_atlas, v_textureCoordinates);\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    float outlineWidth = v_outlineWidth;\\n\\\n    vec4 outlineColor = v_outlineColor;\\n\\\n\\n\\\n    // Get the current distance\\n\\\n    float distance = getDistance(v_textureCoordinates);\\n\\\n\\n\\\n#ifdef GL_OES_standard_derivatives\\n\\\n    float smoothing = fwidth(distance);\\n\\\n    // Get an offset that is approximately half the distance to the neighbor pixels\\n\\\n    // 0.354 is approximately half of 1/sqrt(2)\\n\\\n    vec2 sampleOffset = 0.354 * vec2(dFdx(v_textureCoordinates) + dFdy(v_textureCoordinates));\\n\\\n\\n\\\n    // Sample the center point\\n\\\n    vec4 center = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Sample the 4 neighbors\\n\\\n    vec4 color1 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color2 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color3 = getSDFColor(v_textureCoordinates + vec2(-sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n    vec4 color4 = getSDFColor(v_textureCoordinates + vec2(sampleOffset.x, -sampleOffset.y), outlineWidth, outlineColor, smoothing);\\n\\\n\\n\\\n    // Equally weight the center sample and the 4 neighboring samples\\n\\\n    color = (center + color1 + color2 + color3 + color4)/5.0;\\n\\\n#else\\n\\\n    // Just do a single sample\\n\\\n    float smoothing = 1.0/32.0;\\n\\\n    color = getSDFColor(v_textureCoordinates, outlineWidth, outlineColor, smoothing);\\n\\\n#endif\\n\\\n\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n#else\\n\\\n    color = czm_gammaCorrect(color);\\n\\\n    color *= czm_gammaCorrect(v_color);\\n\\\n#endif\\n\\\n\\n\\\n// Fully transparent parts of the billboard are not pickable.\\n\\\n#if !defined(OPAQUE) && !defined(TRANSLUCENT)\\n\\\n    if (color.a < 0.005)   // matches 0/255 and 1/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n// The billboard is rendered twice. The opaque pass discards translucent fragments\\n\\\n// and the translucent pass discards opaque fragments.\\n\\\n#ifdef OPAQUE\\n\\\n    if (color.a < 0.995)   // matches < 254/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#else\\n\\\n    if (color.a >= 0.995)  // matches 254/255 and 255/255\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n#endif\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VECTOR_TILE\\n\\\n    color *= u_highlightColor;\\n\\\n#endif\\n\\\n    gl_FragColor = color;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_writeLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float temp = v_compressed.y;\\n\\\n\\n\\\n    temp = temp * SHIFT_RIGHT1;\\n\\\n\\n\\\n    float temp2 = (temp - floor(temp)) * SHIFT_LEFT1;\\n\\\n    bool enableDepthTest = temp2 != 0.0;\\n\\\n    bool applyTranslate = floor(temp) != 0.0;\\n\\\n\\n\\\n    if (enableDepthTest) {\\n\\\n        temp = v_compressed.z;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 dimensions;\\n\\\n        dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        dimensions.x = floor(temp);\\n\\\n\\n\\\n        temp = v_compressed.w;\\n\\\n        temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n        vec2 imageSize;\\n\\\n        imageSize.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n        imageSize.x = floor(temp);\\n\\\n\\n\\\n        vec2 adjustedST = v_textureCoordinates - v_textureCoordinateBounds.xy;\\n\\\n        adjustedST = adjustedST / vec2(v_textureCoordinateBounds.z - v_textureCoordinateBounds.x, v_textureCoordinateBounds.w - v_textureCoordinateBounds.y);\\n\\\n\\n\\\n        float epsilonEyeDepth = v_compressed.x + czm_epsilon1;\\n\\\n        float globeDepth1 = getGlobeDepth(adjustedST, v_originTextureCoordinateAndTranslate.xy, applyTranslate, dimensions, imageSize);\\n\\\n\\n\\\n        // negative values go into the screen\\n\\\n        if (globeDepth1 != 0.0 && globeDepth1 > epsilonEyeDepth)\\n\\\n        {\\n\\\n            float globeDepth2 = getGlobeDepth(adjustedST, vec2(0.0, 1.0), applyTranslate, dimensions, imageSize); // top left corner\\n\\\n            if (globeDepth2 != 0.0 && globeDepth2 > epsilonEyeDepth)\\n\\\n            {\\n\\\n                float globeDepth3 = getGlobeDepth(adjustedST, vec2(1.0, 1.0), applyTranslate, dimensions, imageSize); // top right corner\\n\\\n                if (globeDepth3 != 0.0 && globeDepth3 > epsilonEyeDepth)\\n\\\n                {\\n\\\n                    discard;\\n\\\n                }\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"b39c92439bf056dfd1c1bd086dbf01f7","cacheData":{"env":{}}}