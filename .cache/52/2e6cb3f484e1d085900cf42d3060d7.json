{"id":"node_modules/cesium/Source/Shaders/BillboardCollectionVS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"#ifdef INSTANCED\\n\\\nattribute vec2 direction;\\n\\\n#endif\\n\\\nattribute vec4 positionHighAndScale;\\n\\\nattribute vec4 positionLowAndRotation;\\n\\\nattribute vec4 compressedAttribute0;                       // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates (texture offset)\\n\\\nattribute vec4 compressedAttribute1;                       // aligned axis, translucency by distance, image width\\n\\\nattribute vec4 compressedAttribute2;                       // label horizontal origin, image height, color, pick color, size in meters, valid aligned axis, 13 bits free\\n\\\nattribute vec4 eyeOffset;                                  // eye offset in meters, 4 bytes free (texture range)\\n\\\nattribute vec4 scaleByDistance;                            // near, nearScale, far, farScale\\n\\\nattribute vec4 pixelOffsetScaleByDistance;                 // near, nearScale, far, farScale\\n\\\nattribute vec4 compressedAttribute3;                       // distance display condition near, far, disableDepthTestDistance, dimensions\\n\\\nattribute vec2 sdf;                                        // sdf outline color (rgb) and width (w)\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\nattribute vec4 textureCoordinateBoundsOrLabelTranslate;    // the min and max x and y values for the texture coordinates\\n\\\n#endif\\n\\\n#ifdef VECTOR_TILE\\n\\\nattribute float a_batchId;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;\\n\\\nvarying vec4 v_compressed;                                 // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\nconst float UPPER_BOUND = 32768.0;\\n\\\n\\n\\\nconst float SHIFT_LEFT16 = 65536.0;\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT8 = 256.0;\\n\\\nconst float SHIFT_LEFT7 = 128.0;\\n\\\nconst float SHIFT_LEFT5 = 32.0;\\n\\\nconst float SHIFT_LEFT3 = 8.0;\\n\\\nconst float SHIFT_LEFT2 = 4.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT8 = 1.0 / 256.0;\\n\\\nconst float SHIFT_RIGHT7 = 1.0 / 128.0;\\n\\\nconst float SHIFT_RIGHT5 = 1.0 / 32.0;\\n\\\nconst float SHIFT_RIGHT3 = 1.0 / 8.0;\\n\\\nconst float SHIFT_RIGHT2 = 1.0 / 4.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nvec4 addScreenSpaceOffset(vec4 positionEC, vec2 imageSize, float scale, vec2 direction, vec2 origin, vec2 translate, vec2 pixelOffset, vec3 alignedAxis, bool validAlignedAxis, float rotation, bool sizeInMeters, out mat2 rotationMatrix, out float mpp)\\n\\\n{\\n\\\n    // Note the halfSize cannot be computed in JavaScript because it is sent via\\n\\\n    // compressed vertex attributes that coerce it to an integer.\\n\\\n    vec2 halfSize = imageSize * scale * 0.5;\\n\\\n    halfSize *= ((direction * 2.0) - 1.0);\\n\\\n\\n\\\n    vec2 originTranslate = origin * abs(halfSize);\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    if (validAlignedAxis || rotation != 0.0)\\n\\\n    {\\n\\\n        float angle = rotation;\\n\\\n        if (validAlignedAxis)\\n\\\n        {\\n\\\n            vec4 projectedAlignedAxis = czm_modelViewProjection * vec4(alignedAxis, 0.0);\\n\\\n            angle += sign(-projectedAlignedAxis.x) * acos(sign(projectedAlignedAxis.y) * (projectedAlignedAxis.y * projectedAlignedAxis.y) /\\n\\\n                    (projectedAlignedAxis.x * projectedAlignedAxis.x + projectedAlignedAxis.y * projectedAlignedAxis.y));\\n\\\n        }\\n\\\n\\n\\\n        float cosTheta = cos(angle);\\n\\\n        float sinTheta = sin(angle);\\n\\\n        rotationMatrix = mat2(cosTheta, sinTheta, -sinTheta, cosTheta);\\n\\\n        halfSize = rotationMatrix * halfSize;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mpp = czm_metersPerPixel(positionEC);\\n\\\n    positionEC.xy += (originTranslate + halfSize) * czm_branchFreeTernary(sizeInMeters, 1.0, mpp);\\n\\\n    positionEC.xy += (translate + pixelOffset) * mpp;\\n\\\n\\n\\\n    return positionEC;\\n\\\n}\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nfloat getGlobeDepth(vec4 positionEC)\\n\\\n{\\n\\\n    vec4 posWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n\\n\\\n    float globeDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, posWC.xy / czm_viewport.zw));\\n\\\n\\n\\\n    if (globeDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(posWC.xy, globeDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\nvoid main()\\n\\\n{\\n\\\n    // Modifying this shader may also require modifications to Billboard._computeScreenSpacePosition\\n\\\n\\n\\\n    // unpack attributes\\n\\\n    vec3 positionHigh = positionHighAndScale.xyz;\\n\\\n    vec3 positionLow = positionLowAndRotation.xyz;\\n\\\n    float scale = positionHighAndScale.w;\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    float rotation = positionLowAndRotation.w;\\n\\\n#else\\n\\\n    float rotation = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n    float compressed = compressedAttribute0.x;\\n\\\n\\n\\\n    vec2 pixelOffset;\\n\\\n    pixelOffset.x = floor(compressed * SHIFT_RIGHT7);\\n\\\n    compressed -= pixelOffset.x * SHIFT_LEFT7;\\n\\\n    pixelOffset.x -= UPPER_BOUND;\\n\\\n\\n\\\n    vec2 origin;\\n\\\n    origin.x = floor(compressed * SHIFT_RIGHT5);\\n\\\n    compressed -= origin.x * SHIFT_LEFT5;\\n\\\n\\n\\\n    origin.y = floor(compressed * SHIFT_RIGHT3);\\n\\\n    compressed -= origin.y * SHIFT_LEFT3;\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    vec2 depthOrigin = origin.xy;\\n\\\n#endif\\n\\\n    origin -= vec2(1.0);\\n\\\n\\n\\\n    float show = floor(compressed * SHIFT_RIGHT2);\\n\\\n    compressed -= show * SHIFT_LEFT2;\\n\\\n\\n\\\n#ifdef INSTANCED\\n\\\n    vec2 textureCoordinatesBottomLeft = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n    vec2 textureCoordinatesRange = czm_decompressTextureCoordinates(eyeOffset.w);\\n\\\n    vec2 textureCoordinates = textureCoordinatesBottomLeft + direction * textureCoordinatesRange;\\n\\\n#else\\n\\\n    vec2 direction;\\n\\\n    direction.x = floor(compressed * SHIFT_RIGHT1);\\n\\\n    direction.y = compressed - direction.x * SHIFT_LEFT1;\\n\\\n\\n\\\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n#endif\\n\\\n\\n\\\n    float temp = compressedAttribute0.y  * SHIFT_RIGHT8;\\n\\\n    pixelOffset.y = -(floor(temp) - UPPER_BOUND);\\n\\\n\\n\\\n    vec2 translate;\\n\\\n    translate.y = (temp - floor(temp)) * SHIFT_LEFT16;\\n\\\n\\n\\\n    temp = compressedAttribute0.z * SHIFT_RIGHT8;\\n\\\n    translate.x = floor(temp) - UPPER_BOUND;\\n\\\n\\n\\\n    translate.y += (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    translate.y -= UPPER_BOUND;\\n\\\n\\n\\\n    temp = compressedAttribute1.x * SHIFT_RIGHT8;\\n\\\n    float temp2 = floor(compressedAttribute2.w * SHIFT_RIGHT2);\\n\\\n\\n\\\n    vec2 imageSize = vec2(floor(temp), temp2);\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float labelHorizontalOrigin = floor(compressedAttribute2.w - (temp2 * SHIFT_LEFT2));\\n\\\n    float applyTranslate = 0.0;\\n\\\n    if (labelHorizontalOrigin != 0.0) // is a billboard, so set apply translate to false\\n\\\n    {\\n\\\n        applyTranslate = 1.0;\\n\\\n        labelHorizontalOrigin -= 2.0;\\n\\\n        depthOrigin.x = labelHorizontalOrigin + 1.0;\\n\\\n    }\\n\\\n\\n\\\n    depthOrigin = vec2(1.0) - (depthOrigin * 0.5);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    vec4 translucencyByDistance;\\n\\\n    translucencyByDistance.x = compressedAttribute1.z;\\n\\\n    translucencyByDistance.z = compressedAttribute1.w;\\n\\\n\\n\\\n    translucencyByDistance.y = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n\\n\\\n    temp = compressedAttribute1.y * SHIFT_RIGHT8;\\n\\\n    translucencyByDistance.w = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\n    temp = compressedAttribute3.w;\\n\\\n    temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n    vec2 dimensions;\\n\\\n    dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n    dimensions.x = floor(temp);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ALIGNED_AXIS\\n\\\n    vec3 alignedAxis = czm_octDecode(floor(compressedAttribute1.y * SHIFT_RIGHT8));\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT5;\\n\\\n    bool validAlignedAxis = (temp - floor(temp)) * SHIFT_LEFT1 > 0.0;\\n\\\n#else\\n\\\n    vec3 alignedAxis = vec3(0.0);\\n\\\n    bool validAlignedAxis = false;\\n\\\n#endif\\n\\\n\\n\\\n    vec4 pickColor;\\n\\\n    vec4 color;\\n\\\n\\n\\\n    temp = compressedAttribute2.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    pickColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    pickColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    color.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    color.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    color.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT8;\\n\\\n    bool sizeInMeters = floor((temp - floor(temp)) * SHIFT_LEFT7) > 0.0;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n\\n\\\n    pickColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor /= 255.0;\\n\\\n\\n\\\n    color.a = floor(temp);\\n\\\n    color /= 255.0;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\\n\\\n\\n\\\n#if defined(FRAGMENT_DEPTH_CHECK) || defined(VERTEX_DEPTH_CHECK)\\n\\\n    float eyeDepth = positionEC.z;\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = czm_eyeOffset(positionEC, eyeOffset.xyz);\\n\\\n    positionEC.xyz *= show;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n#if defined(EYE_DISTANCE_SCALING) || defined(EYE_DISTANCE_TRANSLUCENCY) || defined(EYE_DISTANCE_PIXEL_OFFSET) || defined(DISTANCE_DISPLAY_CONDITION) || defined(DISABLE_DEPTH_DISTANCE)\\n\\\n    float lengthSq;\\n\\\n    if (czm_sceneMode == czm_sceneMode2D)\\n\\\n    {\\n\\\n        // 2D camera distance is a special case\\n\\\n        // treat all billboards as flattened to the z=0.0 plane\\n\\\n        lengthSq = czm_eyeHeight2D.y;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        lengthSq = dot(positionEC.xyz, positionEC.xyz);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_SCALING\\n\\\n    float distanceScale = czm_nearFarScalar(scaleByDistance, lengthSq);\\n\\\n    scale *= distanceScale;\\n\\\n    translate *= distanceScale;\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (scale == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    float translucency = 1.0;\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    translucency = czm_nearFarScalar(translucencyByDistance, lengthSq);\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (translucency == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_PIXEL_OFFSET\\n\\\n    float pixelOffsetScale = czm_nearFarScalar(pixelOffsetScaleByDistance, lengthSq);\\n\\\n    pixelOffset *= pixelOffsetScale;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISTANCE_DISPLAY_CONDITION\\n\\\n    float nearSq = compressedAttribute3.x;\\n\\\n    float farSq = compressedAttribute3.y;\\n\\\n    if (lengthSq < nearSq || lengthSq > farSq)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mat2 rotationMatrix;\\n\\\n    float mpp;\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    float disableDepthTestDistance = compressedAttribute3.z;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nif (lengthSq < disableDepthTestDistance) {\\n\\\n    float depthsilon = 10.0;\\n\\\n\\n\\\n    vec2 labelTranslate = textureCoordinateBoundsOrLabelTranslate.xy;\\n\\\n    vec4 pEC1 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    float globeDepth1 = getGlobeDepth(pEC1);\\n\\\n\\n\\\n    if (globeDepth1 != 0.0 && pEC1.z + depthsilon < globeDepth1)\\n\\\n    {\\n\\\n        vec4 pEC2 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0, 1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n        float globeDepth2 = getGlobeDepth(pEC2);\\n\\\n\\n\\\n        if (globeDepth2 != 0.0 && pEC2.z + depthsilon < globeDepth2)\\n\\\n        {\\n\\\n            vec4 pEC3 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n            float globeDepth3 = getGlobeDepth(pEC3);\\n\\\n            if (globeDepth3 != 0.0 && pEC3.z + depthsilon < globeDepth3)\\n\\\n            {\\n\\\n                positionEC.xyz = vec3(0.0);\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = addScreenSpaceOffset(positionEC, imageSize, scale, direction, origin, translate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n    v_textureCoordinates = textureCoordinates;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_vertexLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    if (disableDepthTestDistance == 0.0 && czm_minimumDisableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        disableDepthTestDistance = czm_minimumDisableDepthTestDistance;\\n\\\n    }\\n\\\n\\n\\\n    if (disableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        // Don't try to \\\"multiply both sides\\\" by w.  Greater/less-than comparisons won't work for negative values of w.\\n\\\n        float zclip = gl_Position.z / gl_Position.w;\\n\\\n        bool clipped = (zclip < -1.0 || zclip > 1.0);\\n\\\n        if (!clipped && (disableDepthTestDistance < 0.0 || (lengthSq > 0.0 && lengthSq < disableDepthTestDistance)))\\n\\\n        {\\n\\\n            // Position z on the near plane.\\n\\\n            gl_Position.z = -gl_Position.w;\\n\\\n#ifdef LOG_DEPTH\\n\\\n            v_depthFromNearPlusOne = 1.0;\\n\\\n#endif\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    if (sizeInMeters) {\\n\\\n        translate /= mpp;\\n\\\n        dimensions /= mpp;\\n\\\n        imageSize /= mpp;\\n\\\n    }\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    v_rotationMatrix = rotationMatrix;\\n\\\n#else\\n\\\n    v_rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    float enableDepthCheck = 0.0;\\n\\\n    if (lengthSq < disableDepthTestDistance)\\n\\\n    {\\n\\\n        enableDepthCheck = 1.0;\\n\\\n    }\\n\\\n\\n\\\n    float dw = floor(clamp(dimensions.x, 0.0, SHIFT_LEFT12));\\n\\\n    float dh = floor(clamp(dimensions.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    float iw = floor(clamp(imageSize.x, 0.0, SHIFT_LEFT12));\\n\\\n    float ih = floor(clamp(imageSize.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    v_compressed.x = eyeDepth;\\n\\\n    v_compressed.y = applyTranslate * SHIFT_LEFT1 + enableDepthCheck;\\n\\\n    v_compressed.z = dw * SHIFT_LEFT12 + dh;\\n\\\n    v_compressed.w = iw * SHIFT_LEFT12 + ih;\\n\\\n    v_originTextureCoordinateAndTranslate.xy = depthOrigin;\\n\\\n    v_originTextureCoordinateAndTranslate.zw = translate;\\n\\\n    v_textureCoordinateBounds = textureCoordinateBoundsOrLabelTranslate;\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    vec4 outlineColor;\\n\\\n    float outlineWidth;\\n\\\n\\n\\\n    temp = sdf.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    outlineColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.r = floor(temp);\\n\\\n\\n\\\n    temp = sdf.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    float temp3 = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineWidth = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.a = floor(temp);\\n\\\n    outlineColor /= 255.0;\\n\\\n\\n\\\n    v_outlineWidth = outlineWidth / 255.0;\\n\\\n    v_outlineColor = outlineColor;\\n\\\n    v_outlineColor.a *= translucency;\\n\\\n#endif\\n\\\n\\n\\\n    v_pickColor = pickColor;\\n\\\n\\n\\\n    v_color = color;\\n\\\n    v_color.a *= translucency;\\n\\\n\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/BillboardCollectionVS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/BillboardCollectionVS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/BillboardCollectionVS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"#ifdef INSTANCED\\n\\\nattribute vec2 direction;\\n\\\n#endif\\n\\\nattribute vec4 positionHighAndScale;\\n\\\nattribute vec4 positionLowAndRotation;\\n\\\nattribute vec4 compressedAttribute0;                       // pixel offset, translate, horizontal origin, vertical origin, show, direction, texture coordinates (texture offset)\\n\\\nattribute vec4 compressedAttribute1;                       // aligned axis, translucency by distance, image width\\n\\\nattribute vec4 compressedAttribute2;                       // label horizontal origin, image height, color, pick color, size in meters, valid aligned axis, 13 bits free\\n\\\nattribute vec4 eyeOffset;                                  // eye offset in meters, 4 bytes free (texture range)\\n\\\nattribute vec4 scaleByDistance;                            // near, nearScale, far, farScale\\n\\\nattribute vec4 pixelOffsetScaleByDistance;                 // near, nearScale, far, farScale\\n\\\nattribute vec4 compressedAttribute3;                       // distance display condition near, far, disableDepthTestDistance, dimensions\\n\\\nattribute vec2 sdf;                                        // sdf outline color (rgb) and width (w)\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\nattribute vec4 textureCoordinateBoundsOrLabelTranslate;    // the min and max x and y values for the texture coordinates\\n\\\n#endif\\n\\\n#ifdef VECTOR_TILE\\n\\\nattribute float a_batchId;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec2 v_textureCoordinates;\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\nvarying vec4 v_textureCoordinateBounds;\\n\\\nvarying vec4 v_originTextureCoordinateAndTranslate;\\n\\\nvarying vec4 v_compressed;                                 // x: eyeDepth, y: applyTranslate & enableDepthCheck, z: dimensions, w: imageSize\\n\\\nvarying mat2 v_rotationMatrix;\\n\\\n#endif\\n\\\n\\n\\\nvarying vec4 v_pickColor;\\n\\\nvarying vec4 v_color;\\n\\\n#ifdef SDF\\n\\\nvarying vec4 v_outlineColor;\\n\\\nvarying float v_outlineWidth;\\n\\\n#endif\\n\\\n\\n\\\nconst float UPPER_BOUND = 32768.0;\\n\\\n\\n\\\nconst float SHIFT_LEFT16 = 65536.0;\\n\\\nconst float SHIFT_LEFT12 = 4096.0;\\n\\\nconst float SHIFT_LEFT8 = 256.0;\\n\\\nconst float SHIFT_LEFT7 = 128.0;\\n\\\nconst float SHIFT_LEFT5 = 32.0;\\n\\\nconst float SHIFT_LEFT3 = 8.0;\\n\\\nconst float SHIFT_LEFT2 = 4.0;\\n\\\nconst float SHIFT_LEFT1 = 2.0;\\n\\\n\\n\\\nconst float SHIFT_RIGHT12 = 1.0 / 4096.0;\\n\\\nconst float SHIFT_RIGHT8 = 1.0 / 256.0;\\n\\\nconst float SHIFT_RIGHT7 = 1.0 / 128.0;\\n\\\nconst float SHIFT_RIGHT5 = 1.0 / 32.0;\\n\\\nconst float SHIFT_RIGHT3 = 1.0 / 8.0;\\n\\\nconst float SHIFT_RIGHT2 = 1.0 / 4.0;\\n\\\nconst float SHIFT_RIGHT1 = 1.0 / 2.0;\\n\\\n\\n\\\nvec4 addScreenSpaceOffset(vec4 positionEC, vec2 imageSize, float scale, vec2 direction, vec2 origin, vec2 translate, vec2 pixelOffset, vec3 alignedAxis, bool validAlignedAxis, float rotation, bool sizeInMeters, out mat2 rotationMatrix, out float mpp)\\n\\\n{\\n\\\n    // Note the halfSize cannot be computed in JavaScript because it is sent via\\n\\\n    // compressed vertex attributes that coerce it to an integer.\\n\\\n    vec2 halfSize = imageSize * scale * 0.5;\\n\\\n    halfSize *= ((direction * 2.0) - 1.0);\\n\\\n\\n\\\n    vec2 originTranslate = origin * abs(halfSize);\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    if (validAlignedAxis || rotation != 0.0)\\n\\\n    {\\n\\\n        float angle = rotation;\\n\\\n        if (validAlignedAxis)\\n\\\n        {\\n\\\n            vec4 projectedAlignedAxis = czm_modelViewProjection * vec4(alignedAxis, 0.0);\\n\\\n            angle += sign(-projectedAlignedAxis.x) * acos(sign(projectedAlignedAxis.y) * (projectedAlignedAxis.y * projectedAlignedAxis.y) /\\n\\\n                    (projectedAlignedAxis.x * projectedAlignedAxis.x + projectedAlignedAxis.y * projectedAlignedAxis.y));\\n\\\n        }\\n\\\n\\n\\\n        float cosTheta = cos(angle);\\n\\\n        float sinTheta = sin(angle);\\n\\\n        rotationMatrix = mat2(cosTheta, sinTheta, -sinTheta, cosTheta);\\n\\\n        halfSize = rotationMatrix * halfSize;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mpp = czm_metersPerPixel(positionEC);\\n\\\n    positionEC.xy += (originTranslate + halfSize) * czm_branchFreeTernary(sizeInMeters, 1.0, mpp);\\n\\\n    positionEC.xy += (translate + pixelOffset) * mpp;\\n\\\n\\n\\\n    return positionEC;\\n\\\n}\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nfloat getGlobeDepth(vec4 positionEC)\\n\\\n{\\n\\\n    vec4 posWC = czm_eyeToWindowCoordinates(positionEC);\\n\\\n\\n\\\n    float globeDepth = czm_unpackDepth(texture2D(czm_globeDepthTexture, posWC.xy / czm_viewport.zw));\\n\\\n\\n\\\n    if (globeDepth == 0.0)\\n\\\n    {\\n\\\n        return 0.0; // not on the globe\\n\\\n    }\\n\\\n\\n\\\n    vec4 eyeCoordinate = czm_windowToEyeCoordinates(posWC.xy, globeDepth);\\n\\\n    return eyeCoordinate.z / eyeCoordinate.w;\\n\\\n}\\n\\\n#endif\\n\\\nvoid main()\\n\\\n{\\n\\\n    // Modifying this shader may also require modifications to Billboard._computeScreenSpacePosition\\n\\\n\\n\\\n    // unpack attributes\\n\\\n    vec3 positionHigh = positionHighAndScale.xyz;\\n\\\n    vec3 positionLow = positionLowAndRotation.xyz;\\n\\\n    float scale = positionHighAndScale.w;\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    float rotation = positionLowAndRotation.w;\\n\\\n#else\\n\\\n    float rotation = 0.0;\\n\\\n#endif\\n\\\n\\n\\\n    float compressed = compressedAttribute0.x;\\n\\\n\\n\\\n    vec2 pixelOffset;\\n\\\n    pixelOffset.x = floor(compressed * SHIFT_RIGHT7);\\n\\\n    compressed -= pixelOffset.x * SHIFT_LEFT7;\\n\\\n    pixelOffset.x -= UPPER_BOUND;\\n\\\n\\n\\\n    vec2 origin;\\n\\\n    origin.x = floor(compressed * SHIFT_RIGHT5);\\n\\\n    compressed -= origin.x * SHIFT_LEFT5;\\n\\\n\\n\\\n    origin.y = floor(compressed * SHIFT_RIGHT3);\\n\\\n    compressed -= origin.y * SHIFT_LEFT3;\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    vec2 depthOrigin = origin.xy;\\n\\\n#endif\\n\\\n    origin -= vec2(1.0);\\n\\\n\\n\\\n    float show = floor(compressed * SHIFT_RIGHT2);\\n\\\n    compressed -= show * SHIFT_LEFT2;\\n\\\n\\n\\\n#ifdef INSTANCED\\n\\\n    vec2 textureCoordinatesBottomLeft = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n    vec2 textureCoordinatesRange = czm_decompressTextureCoordinates(eyeOffset.w);\\n\\\n    vec2 textureCoordinates = textureCoordinatesBottomLeft + direction * textureCoordinatesRange;\\n\\\n#else\\n\\\n    vec2 direction;\\n\\\n    direction.x = floor(compressed * SHIFT_RIGHT1);\\n\\\n    direction.y = compressed - direction.x * SHIFT_LEFT1;\\n\\\n\\n\\\n    vec2 textureCoordinates = czm_decompressTextureCoordinates(compressedAttribute0.w);\\n\\\n#endif\\n\\\n\\n\\\n    float temp = compressedAttribute0.y  * SHIFT_RIGHT8;\\n\\\n    pixelOffset.y = -(floor(temp) - UPPER_BOUND);\\n\\\n\\n\\\n    vec2 translate;\\n\\\n    translate.y = (temp - floor(temp)) * SHIFT_LEFT16;\\n\\\n\\n\\\n    temp = compressedAttribute0.z * SHIFT_RIGHT8;\\n\\\n    translate.x = floor(temp) - UPPER_BOUND;\\n\\\n\\n\\\n    translate.y += (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    translate.y -= UPPER_BOUND;\\n\\\n\\n\\\n    temp = compressedAttribute1.x * SHIFT_RIGHT8;\\n\\\n    float temp2 = floor(compressedAttribute2.w * SHIFT_RIGHT2);\\n\\\n\\n\\\n    vec2 imageSize = vec2(floor(temp), temp2);\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    float labelHorizontalOrigin = floor(compressedAttribute2.w - (temp2 * SHIFT_LEFT2));\\n\\\n    float applyTranslate = 0.0;\\n\\\n    if (labelHorizontalOrigin != 0.0) // is a billboard, so set apply translate to false\\n\\\n    {\\n\\\n        applyTranslate = 1.0;\\n\\\n        labelHorizontalOrigin -= 2.0;\\n\\\n        depthOrigin.x = labelHorizontalOrigin + 1.0;\\n\\\n    }\\n\\\n\\n\\\n    depthOrigin = vec2(1.0) - (depthOrigin * 0.5);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    vec4 translucencyByDistance;\\n\\\n    translucencyByDistance.x = compressedAttribute1.z;\\n\\\n    translucencyByDistance.z = compressedAttribute1.w;\\n\\\n\\n\\\n    translucencyByDistance.y = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n\\n\\\n    temp = compressedAttribute1.y * SHIFT_RIGHT8;\\n\\\n    translucencyByDistance.w = ((temp - floor(temp)) * SHIFT_LEFT8) / 255.0;\\n\\\n#endif\\n\\\n\\n\\\n#if defined(VERTEX_DEPTH_CHECK) || defined(FRAGMENT_DEPTH_CHECK)\\n\\\n    temp = compressedAttribute3.w;\\n\\\n    temp = temp * SHIFT_RIGHT12;\\n\\\n\\n\\\n    vec2 dimensions;\\n\\\n    dimensions.y = (temp - floor(temp)) * SHIFT_LEFT12;\\n\\\n    dimensions.x = floor(temp);\\n\\\n#endif\\n\\\n\\n\\\n#ifdef ALIGNED_AXIS\\n\\\n    vec3 alignedAxis = czm_octDecode(floor(compressedAttribute1.y * SHIFT_RIGHT8));\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT5;\\n\\\n    bool validAlignedAxis = (temp - floor(temp)) * SHIFT_LEFT1 > 0.0;\\n\\\n#else\\n\\\n    vec3 alignedAxis = vec3(0.0);\\n\\\n    bool validAlignedAxis = false;\\n\\\n#endif\\n\\\n\\n\\\n    vec4 pickColor;\\n\\\n    vec4 color;\\n\\\n\\n\\\n    temp = compressedAttribute2.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    pickColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    pickColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    color.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    color.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    color.r = floor(temp);\\n\\\n\\n\\\n    temp = compressedAttribute2.z * SHIFT_RIGHT8;\\n\\\n    bool sizeInMeters = floor((temp - floor(temp)) * SHIFT_LEFT7) > 0.0;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n\\n\\\n    pickColor.a = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    pickColor /= 255.0;\\n\\\n\\n\\\n    color.a = floor(temp);\\n\\\n    color /= 255.0;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n    vec4 p = czm_translateRelativeToEye(positionHigh, positionLow);\\n\\\n    vec4 positionEC = czm_modelViewRelativeToEye * p;\\n\\\n\\n\\\n#if defined(FRAGMENT_DEPTH_CHECK) || defined(VERTEX_DEPTH_CHECK)\\n\\\n    float eyeDepth = positionEC.z;\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = czm_eyeOffset(positionEC, eyeOffset.xyz);\\n\\\n    positionEC.xyz *= show;\\n\\\n\\n\\\n    ///////////////////////////////////////////////////////////////////////////\\n\\\n\\n\\\n#if defined(EYE_DISTANCE_SCALING) || defined(EYE_DISTANCE_TRANSLUCENCY) || defined(EYE_DISTANCE_PIXEL_OFFSET) || defined(DISTANCE_DISPLAY_CONDITION) || defined(DISABLE_DEPTH_DISTANCE)\\n\\\n    float lengthSq;\\n\\\n    if (czm_sceneMode == czm_sceneMode2D)\\n\\\n    {\\n\\\n        // 2D camera distance is a special case\\n\\\n        // treat all billboards as flattened to the z=0.0 plane\\n\\\n        lengthSq = czm_eyeHeight2D.y;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        lengthSq = dot(positionEC.xyz, positionEC.xyz);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_SCALING\\n\\\n    float distanceScale = czm_nearFarScalar(scaleByDistance, lengthSq);\\n\\\n    scale *= distanceScale;\\n\\\n    translate *= distanceScale;\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (scale == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    float translucency = 1.0;\\n\\\n#ifdef EYE_DISTANCE_TRANSLUCENCY\\n\\\n    translucency = czm_nearFarScalar(translucencyByDistance, lengthSq);\\n\\\n    // push vertex behind near plane for clipping\\n\\\n    if (translucency == 0.0)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef EYE_DISTANCE_PIXEL_OFFSET\\n\\\n    float pixelOffsetScale = czm_nearFarScalar(pixelOffsetScaleByDistance, lengthSq);\\n\\\n    pixelOffset *= pixelOffsetScale;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISTANCE_DISPLAY_CONDITION\\n\\\n    float nearSq = compressedAttribute3.x;\\n\\\n    float farSq = compressedAttribute3.y;\\n\\\n    if (lengthSq < nearSq || lengthSq > farSq)\\n\\\n    {\\n\\\n        positionEC.xyz = vec3(0.0);\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n    mat2 rotationMatrix;\\n\\\n    float mpp;\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    float disableDepthTestDistance = compressedAttribute3.z;\\n\\\n#endif\\n\\\n\\n\\\n#ifdef VERTEX_DEPTH_CHECK\\n\\\nif (lengthSq < disableDepthTestDistance) {\\n\\\n    float depthsilon = 10.0;\\n\\\n\\n\\\n    vec2 labelTranslate = textureCoordinateBoundsOrLabelTranslate.xy;\\n\\\n    vec4 pEC1 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    float globeDepth1 = getGlobeDepth(pEC1);\\n\\\n\\n\\\n    if (globeDepth1 != 0.0 && pEC1.z + depthsilon < globeDepth1)\\n\\\n    {\\n\\\n        vec4 pEC2 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(0.0, 1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n        float globeDepth2 = getGlobeDepth(pEC2);\\n\\\n\\n\\\n        if (globeDepth2 != 0.0 && pEC2.z + depthsilon < globeDepth2)\\n\\\n        {\\n\\\n            vec4 pEC3 = addScreenSpaceOffset(positionEC, dimensions, scale, vec2(1.0), origin, labelTranslate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n            float globeDepth3 = getGlobeDepth(pEC3);\\n\\\n            if (globeDepth3 != 0.0 && pEC3.z + depthsilon < globeDepth3)\\n\\\n            {\\n\\\n                positionEC.xyz = vec3(0.0);\\n\\\n            }\\n\\\n        }\\n\\\n    }\\n\\\n}\\n\\\n#endif\\n\\\n\\n\\\n    positionEC = addScreenSpaceOffset(positionEC, imageSize, scale, direction, origin, translate, pixelOffset, alignedAxis, validAlignedAxis, rotation, sizeInMeters, rotationMatrix, mpp);\\n\\\n    gl_Position = czm_projection * positionEC;\\n\\\n    v_textureCoordinates = textureCoordinates;\\n\\\n\\n\\\n#ifdef LOG_DEPTH\\n\\\n    czm_vertexLogDepth();\\n\\\n#endif\\n\\\n\\n\\\n#ifdef DISABLE_DEPTH_DISTANCE\\n\\\n    if (disableDepthTestDistance == 0.0 && czm_minimumDisableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        disableDepthTestDistance = czm_minimumDisableDepthTestDistance;\\n\\\n    }\\n\\\n\\n\\\n    if (disableDepthTestDistance != 0.0)\\n\\\n    {\\n\\\n        // Don't try to \\\"multiply both sides\\\" by w.  Greater/less-than comparisons won't work for negative values of w.\\n\\\n        float zclip = gl_Position.z / gl_Position.w;\\n\\\n        bool clipped = (zclip < -1.0 || zclip > 1.0);\\n\\\n        if (!clipped && (disableDepthTestDistance < 0.0 || (lengthSq > 0.0 && lengthSq < disableDepthTestDistance)))\\n\\\n        {\\n\\\n            // Position z on the near plane.\\n\\\n            gl_Position.z = -gl_Position.w;\\n\\\n#ifdef LOG_DEPTH\\n\\\n            v_depthFromNearPlusOne = 1.0;\\n\\\n#endif\\n\\\n        }\\n\\\n    }\\n\\\n#endif\\n\\\n\\n\\\n#ifdef FRAGMENT_DEPTH_CHECK\\n\\\n    if (sizeInMeters) {\\n\\\n        translate /= mpp;\\n\\\n        dimensions /= mpp;\\n\\\n        imageSize /= mpp;\\n\\\n    }\\n\\\n\\n\\\n#if defined(ROTATION) || defined(ALIGNED_AXIS)\\n\\\n    v_rotationMatrix = rotationMatrix;\\n\\\n#else\\n\\\n    v_rotationMatrix = mat2(1.0, 0.0, 0.0, 1.0);\\n\\\n#endif\\n\\\n\\n\\\n    float enableDepthCheck = 0.0;\\n\\\n    if (lengthSq < disableDepthTestDistance)\\n\\\n    {\\n\\\n        enableDepthCheck = 1.0;\\n\\\n    }\\n\\\n\\n\\\n    float dw = floor(clamp(dimensions.x, 0.0, SHIFT_LEFT12));\\n\\\n    float dh = floor(clamp(dimensions.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    float iw = floor(clamp(imageSize.x, 0.0, SHIFT_LEFT12));\\n\\\n    float ih = floor(clamp(imageSize.y, 0.0, SHIFT_LEFT12));\\n\\\n\\n\\\n    v_compressed.x = eyeDepth;\\n\\\n    v_compressed.y = applyTranslate * SHIFT_LEFT1 + enableDepthCheck;\\n\\\n    v_compressed.z = dw * SHIFT_LEFT12 + dh;\\n\\\n    v_compressed.w = iw * SHIFT_LEFT12 + ih;\\n\\\n    v_originTextureCoordinateAndTranslate.xy = depthOrigin;\\n\\\n    v_originTextureCoordinateAndTranslate.zw = translate;\\n\\\n    v_textureCoordinateBounds = textureCoordinateBoundsOrLabelTranslate;\\n\\\n\\n\\\n#endif\\n\\\n\\n\\\n#ifdef SDF\\n\\\n    vec4 outlineColor;\\n\\\n    float outlineWidth;\\n\\\n\\n\\\n    temp = sdf.x;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    outlineColor.b = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineColor.g = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.r = floor(temp);\\n\\\n\\n\\\n    temp = sdf.y;\\n\\\n    temp = temp * SHIFT_RIGHT8;\\n\\\n    float temp3 = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    temp = floor(temp) * SHIFT_RIGHT8;\\n\\\n    outlineWidth = (temp - floor(temp)) * SHIFT_LEFT8;\\n\\\n    outlineColor.a = floor(temp);\\n\\\n    outlineColor /= 255.0;\\n\\\n\\n\\\n    v_outlineWidth = outlineWidth / 255.0;\\n\\\n    v_outlineColor = outlineColor;\\n\\\n    v_outlineColor.a *= translucency;\\n\\\n#endif\\n\\\n\\n\\\n    v_pickColor = pickColor;\\n\\\n\\n\\\n    v_color = color;\\n\\\n    v_color.a *= translucency;\\n\\\n\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"b7a8ec1ca3bca9ed51953141237a8ede","cacheData":{"env":{}}}