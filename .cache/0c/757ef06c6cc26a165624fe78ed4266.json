{"id":"node_modules/cesium/Source/Shaders/ModelExperimental/FeatureStageVS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"// This stage is only applied for Feature ID vertex attributes.\\n\\\n// If Feature ID textures are present, those are used in the fragment shader.\\n\\\nvoid featureStage(inout Feature feature)\\n\\\n{\\n\\\n    float featureId = FEATURE_ID_ATTRIBUTE;\\n\\\n\\n\\\n    if (featureId < model_featuresLength)\\n\\\n    {\\n\\\n        vec2 featureSt = computeSt(featureId);\\n\\\n\\n\\\n        feature.id = int(featureId);\\n\\\n        feature.st = featureSt;\\n\\\n        feature.color = texture2D(model_batchTexture, featureSt);\\n\\\n    }\\n\\\n    // Floating point comparisons can be unreliable in GLSL, so we\\n\\\n    // increment the feature ID to make sure it's always greater\\n\\\n    // then the model_featuresLength - a condition we check for in the\\n\\\n    // pick ID, to avoid sampling the pick texture if the feature ID is\\n\\\n    // greater than the number of features.\\n\\\n    else\\n\\\n    {\\n\\\n        feature.id = int(model_featuresLength) + 1;\\n\\\n        feature.st = vec2(0.0);\\n\\\n        feature.color = vec4(1.0);\\n\\\n    }\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/FeatureStageVS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/FeatureStageVS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/ModelExperimental/FeatureStageVS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"// This stage is only applied for Feature ID vertex attributes.\\n\\\n// If Feature ID textures are present, those are used in the fragment shader.\\n\\\nvoid featureStage(inout Feature feature)\\n\\\n{\\n\\\n    float featureId = FEATURE_ID_ATTRIBUTE;\\n\\\n\\n\\\n    if (featureId < model_featuresLength)\\n\\\n    {\\n\\\n        vec2 featureSt = computeSt(featureId);\\n\\\n\\n\\\n        feature.id = int(featureId);\\n\\\n        feature.st = featureSt;\\n\\\n        feature.color = texture2D(model_batchTexture, featureSt);\\n\\\n    }\\n\\\n    // Floating point comparisons can be unreliable in GLSL, so we\\n\\\n    // increment the feature ID to make sure it's always greater\\n\\\n    // then the model_featuresLength - a condition we check for in the\\n\\\n    // pick ID, to avoid sampling the pick texture if the feature ID is\\n\\\n    // greater than the number of features.\\n\\\n    else\\n\\\n    {\\n\\\n        feature.id = int(model_featuresLength) + 1;\\n\\\n        feature.st = vec2(0.0);\\n\\\n        feature.color = vec4(1.0);\\n\\\n    }\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"9a940099fd31815234514c2494e9e08d","cacheData":{"env":{}}}