{"id":"node_modules/cesium/Source/Shaders/ModelExperimental/CPUStylingStageFS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"void filterByPassType(vec4 featureColor)\\n\\\n{\\n\\\n    bool styleTranslucent = (featureColor.a != 1.0);\\n\\\n    // Only render translucent features in the translucent pass (if the style or the original command has translucency).\\n\\\n    if (czm_pass == czm_passTranslucent && !styleTranslucent && !model_commandTranslucent)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n    // If the current pass is not the translucent pass and the style is not translucent, don't render the feature.\\n\\\n    else if (czm_pass != czm_passTranslucent && styleTranslucent)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n}\\n\\\n\\n\\\nvoid cpuStylingStage(inout czm_modelMaterial material, Feature feature)\\n\\\n{\\n\\\n    vec4 featureColor = feature.color;\\n\\\n\\n\\\n    if (featureColor.a == 0.0)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If a feature ID vertex attribute is used, the pass type filter is applied in the vertex shader.\\n\\\n    // So, we only apply in in the fragment shader if the feature ID texture is used.\\n\\\n    #ifdef FEATURE_ID_TEXTURE\\n\\\n    filterByPassType(featureColor);\\n\\\n    #endif\\n\\\n\\n\\\n    featureColor = czm_gammaCorrect(featureColor);\\n\\\n\\n\\\n    float highlight = ceil(model_colorBlend);\\n\\\n    material.diffuse *= mix(featureColor.rgb, vec3(1.0), highlight);\\n\\\n    material.alpha *= featureColor.a;\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/CPUStylingStageFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/CPUStylingStageFS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/ModelExperimental/CPUStylingStageFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"void filterByPassType(vec4 featureColor)\\n\\\n{\\n\\\n    bool styleTranslucent = (featureColor.a != 1.0);\\n\\\n    // Only render translucent features in the translucent pass (if the style or the original command has translucency).\\n\\\n    if (czm_pass == czm_passTranslucent && !styleTranslucent && !model_commandTranslucent)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n    // If the current pass is not the translucent pass and the style is not translucent, don't render the feature.\\n\\\n    else if (czm_pass != czm_passTranslucent && styleTranslucent)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n}\\n\\\n\\n\\\nvoid cpuStylingStage(inout czm_modelMaterial material, Feature feature)\\n\\\n{\\n\\\n    vec4 featureColor = feature.color;\\n\\\n\\n\\\n    if (featureColor.a == 0.0)\\n\\\n    {\\n\\\n        discard;\\n\\\n    }\\n\\\n\\n\\\n    // If a feature ID vertex attribute is used, the pass type filter is applied in the vertex shader.\\n\\\n    // So, we only apply in in the fragment shader if the feature ID texture is used.\\n\\\n    #ifdef FEATURE_ID_TEXTURE\\n\\\n    filterByPassType(featureColor);\\n\\\n    #endif\\n\\\n\\n\\\n    featureColor = czm_gammaCorrect(featureColor);\\n\\\n\\n\\\n    float highlight = ceil(model_colorBlend);\\n\\\n    material.diffuse *= mix(featureColor.rgb, vec3(1.0), highlight);\\n\\\n    material.alpha *= featureColor.a;\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"aaec5079828e5f64efc75872d7625433","cacheData":{"env":{}}}