{"id":"node_modules/cesium/Source/Core/ClockRange.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Constants used by {@link Clock#tick} to determine behavior\n * when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n *\n * @enum {Number}\n *\n * @see Clock\n * @see ClockStep\n */\nvar ClockRange = {\n  /**\n   * {@link Clock#tick} will always advances the clock in its current direction.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNBOUNDED: 0,\n\n  /**\n   * When {@link Clock#startTime} or {@link Clock#stopTime} is reached,\n   * {@link Clock#tick} will not advance {@link Clock#currentTime} any further.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CLAMPED: 1,\n\n  /**\n   * When {@link Clock#stopTime} is reached, {@link Clock#tick} will advance\n   * {@link Clock#currentTime} to the opposite end of the interval.  When\n   * time is moving backwards, {@link Clock#tick} will not advance past\n   * {@link Clock#startTime}\n   *\n   * @type {Number}\n   * @constant\n   */\n  LOOP_STOP: 2\n};\n\nvar _default = Object.freeze(ClockRange);\n\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":1,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":0}},{"name":"ClockRange","generated":{"line":17,"column":4},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":4}},{"generated":{"line":17,"column":14},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":14}},{"generated":{"line":17,"column":17},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":17}},{"generated":{"line":18,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":11,"column":2}},{"name":"UNBOUNDED","generated":{"line":24,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":17,"column":2}},{"name":"UNBOUNDED","generated":{"line":24,"column":2},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":17,"column":2}},{"generated":{"line":24,"column":11},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":17,"column":11}},{"generated":{"line":24,"column":13},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":17,"column":13}},{"generated":{"line":24,"column":14},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":17}},{"generated":{"line":26,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":19,"column":2}},{"name":"CLAMPED","generated":{"line":33,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":26,"column":2}},{"name":"CLAMPED","generated":{"line":33,"column":2},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":26,"column":2}},{"generated":{"line":33,"column":9},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":26,"column":9}},{"generated":{"line":33,"column":11},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":26,"column":11}},{"generated":{"line":33,"column":12},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":17}},{"generated":{"line":35,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":28,"column":2}},{"name":"LOOP_STOP","generated":{"line":44,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":37,"column":2}},{"name":"LOOP_STOP","generated":{"line":44,"column":2},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":37,"column":2}},{"generated":{"line":44,"column":11},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":37,"column":11}},{"generated":{"line":44,"column":13},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":37,"column":13}},{"generated":{"line":45,"column":0},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":17}},{"generated":{"line":45,"column":1},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":10,"column":0}},{"name":"Object","generated":{"line":47,"column":15},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":39,"column":15}},{"generated":{"line":47,"column":21},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":39,"column":21}},{"name":"freeze","generated":{"line":47,"column":22},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":39,"column":22}},{"generated":{"line":47,"column":28},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":39,"column":15}},{"name":"ClockRange","generated":{"line":47,"column":29},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":39,"column":29}},{"generated":{"line":47,"column":39},"source":"node_modules/cesium/Source/Core/ClockRange.js","original":{"line":39,"column":15}}],"sources":{"node_modules/cesium/Source/Core/ClockRange.js":"/**\n * Constants used by {@link Clock#tick} to determine behavior\n * when {@link Clock#startTime} or {@link Clock#stopTime} is reached.\n *\n * @enum {Number}\n *\n * @see Clock\n * @see ClockStep\n */\nvar ClockRange = {\n  /**\n   * {@link Clock#tick} will always advances the clock in its current direction.\n   *\n   * @type {Number}\n   * @constant\n   */\n  UNBOUNDED: 0,\n\n  /**\n   * When {@link Clock#startTime} or {@link Clock#stopTime} is reached,\n   * {@link Clock#tick} will not advance {@link Clock#currentTime} any further.\n   *\n   * @type {Number}\n   * @constant\n   */\n  CLAMPED: 1,\n\n  /**\n   * When {@link Clock#stopTime} is reached, {@link Clock#tick} will advance\n   * {@link Clock#currentTime} to the opposite end of the interval.  When\n   * time is moving backwards, {@link Clock#tick} will not advance past\n   * {@link Clock#startTime}\n   *\n   * @type {Number}\n   * @constant\n   */\n  LOOP_STOP: 2,\n};\nexport default Object.freeze(ClockRange);\n"},"lineCount":null}},"error":null,"hash":"e216ff5f4157025e645b0548722c91fb","cacheData":{"env":{}}}