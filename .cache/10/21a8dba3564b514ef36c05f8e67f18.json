{"id":"node_modules/cesium/Source/Shaders/Builtin/Functions/sampleOctahedralProjection.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"/**\\n\\\n * Samples the 4 neighboring pixels and return the weighted average.\\n\\\n *\\n\\\n * @private\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjectionWithFiltering(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod)\\n\\\n{\\n\\\n    direction /= dot(vec3(1.0), abs(direction));\\n\\\n    vec2 rev = abs(direction.zx) - vec2(1.0);\\n\\\n    vec2 neg = vec2(direction.x < 0.0 ? rev.x : -rev.x,\\n\\\n                    direction.z < 0.0 ? rev.y : -rev.y);\\n\\\n    vec2 uv = direction.y < 0.0 ? neg : direction.xz;\\n\\\n    vec2 coord = 0.5 * uv + vec2(0.5);\\n\\\n    vec2 pixel = 1.0 / textureSize;\\n\\\n\\n\\\n    if (lod > 0.0)\\n\\\n    {\\n\\\n        // Each subseqeuent mip level is half the size\\n\\\n        float scale = 1.0 / pow(2.0, lod);\\n\\\n        float offset = ((textureSize.y + 1.0) / textureSize.x);\\n\\\n\\n\\\n        coord.x *= offset;\\n\\\n        coord *= scale;\\n\\\n\\n\\\n        coord.x += offset + pixel.x;\\n\\\n        coord.y += (1.0 - (1.0 / pow(2.0, lod - 1.0))) + pixel.y * (lod - 1.0) * 2.0;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        coord.x *= (textureSize.y / textureSize.x);\\n\\\n    }\\n\\\n\\n\\\n    // Do bilinear filtering\\n\\\n    #ifndef OES_texture_float_linear\\n\\\n        vec3 color1 = texture2D(projectedMap, coord + vec2(0.0, pixel.y)).rgb;\\n\\\n        vec3 color2 = texture2D(projectedMap, coord + vec2(pixel.x, 0.0)).rgb;\\n\\\n        vec3 color3 = texture2D(projectedMap, coord + pixel).rgb;\\n\\\n        vec3 color4 = texture2D(projectedMap, coord).rgb;\\n\\\n\\n\\\n        vec2 texturePosition = coord * textureSize;\\n\\\n\\n\\\n        float fu = fract(texturePosition.x);\\n\\\n        float fv = fract(texturePosition.y);\\n\\\n\\n\\\n        vec3 average1 = mix(color4, color2, fu);\\n\\\n        vec3 average2 = mix(color1, color3, fu);\\n\\\n\\n\\\n        vec3 color = mix(average1, average2, fv);\\n\\\n    #else\\n\\\n        vec3 color = texture2D(projectedMap, coord).rgb;\\n\\\n    #endif\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\n\\n\\\n/**\\n\\\n * Samples from a cube map that has been projected using an octahedral projection from the given direction.\\n\\\n *\\n\\\n * @name czm_sampleOctahedralProjection\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {sampler2D} projectedMap The texture with the octahedral projected cube map.\\n\\\n * @param {vec2} textureSize The width and height dimensions in pixels of the projected map.\\n\\\n * @param {vec3} direction The normalized direction used to sample the cube map.\\n\\\n * @param {float} lod The level of detail to sample.\\n\\\n * @param {float} maxLod The maximum level of detail.\\n\\\n * @returns {vec3} The color of the cube map at the direction.\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjection(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod, float maxLod) {\\n\\\n    float currentLod = floor(lod + 0.5);\\n\\\n    float nextLod = min(currentLod + 1.0, maxLod);\\n\\\n\\n\\\n    vec3 colorCurrentLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, currentLod);\\n\\\n    vec3 colorNextLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, nextLod);\\n\\\n\\n\\\n    return mix(colorNextLod, colorCurrentLod, nextLod - lod);\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/sampleOctahedralProjection.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/Builtin/Functions/sampleOctahedralProjection.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/Builtin/Functions/sampleOctahedralProjection.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"/**\\n\\\n * Samples the 4 neighboring pixels and return the weighted average.\\n\\\n *\\n\\\n * @private\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjectionWithFiltering(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod)\\n\\\n{\\n\\\n    direction /= dot(vec3(1.0), abs(direction));\\n\\\n    vec2 rev = abs(direction.zx) - vec2(1.0);\\n\\\n    vec2 neg = vec2(direction.x < 0.0 ? rev.x : -rev.x,\\n\\\n                    direction.z < 0.0 ? rev.y : -rev.y);\\n\\\n    vec2 uv = direction.y < 0.0 ? neg : direction.xz;\\n\\\n    vec2 coord = 0.5 * uv + vec2(0.5);\\n\\\n    vec2 pixel = 1.0 / textureSize;\\n\\\n\\n\\\n    if (lod > 0.0)\\n\\\n    {\\n\\\n        // Each subseqeuent mip level is half the size\\n\\\n        float scale = 1.0 / pow(2.0, lod);\\n\\\n        float offset = ((textureSize.y + 1.0) / textureSize.x);\\n\\\n\\n\\\n        coord.x *= offset;\\n\\\n        coord *= scale;\\n\\\n\\n\\\n        coord.x += offset + pixel.x;\\n\\\n        coord.y += (1.0 - (1.0 / pow(2.0, lod - 1.0))) + pixel.y * (lod - 1.0) * 2.0;\\n\\\n    }\\n\\\n    else\\n\\\n    {\\n\\\n        coord.x *= (textureSize.y / textureSize.x);\\n\\\n    }\\n\\\n\\n\\\n    // Do bilinear filtering\\n\\\n    #ifndef OES_texture_float_linear\\n\\\n        vec3 color1 = texture2D(projectedMap, coord + vec2(0.0, pixel.y)).rgb;\\n\\\n        vec3 color2 = texture2D(projectedMap, coord + vec2(pixel.x, 0.0)).rgb;\\n\\\n        vec3 color3 = texture2D(projectedMap, coord + pixel).rgb;\\n\\\n        vec3 color4 = texture2D(projectedMap, coord).rgb;\\n\\\n\\n\\\n        vec2 texturePosition = coord * textureSize;\\n\\\n\\n\\\n        float fu = fract(texturePosition.x);\\n\\\n        float fv = fract(texturePosition.y);\\n\\\n\\n\\\n        vec3 average1 = mix(color4, color2, fu);\\n\\\n        vec3 average2 = mix(color1, color3, fu);\\n\\\n\\n\\\n        vec3 color = mix(average1, average2, fv);\\n\\\n    #else\\n\\\n        vec3 color = texture2D(projectedMap, coord).rgb;\\n\\\n    #endif\\n\\\n\\n\\\n    return color;\\n\\\n}\\n\\\n\\n\\\n\\n\\\n/**\\n\\\n * Samples from a cube map that has been projected using an octahedral projection from the given direction.\\n\\\n *\\n\\\n * @name czm_sampleOctahedralProjection\\n\\\n * @glslFunction\\n\\\n *\\n\\\n * @param {sampler2D} projectedMap The texture with the octahedral projected cube map.\\n\\\n * @param {vec2} textureSize The width and height dimensions in pixels of the projected map.\\n\\\n * @param {vec3} direction The normalized direction used to sample the cube map.\\n\\\n * @param {float} lod The level of detail to sample.\\n\\\n * @param {float} maxLod The maximum level of detail.\\n\\\n * @returns {vec3} The color of the cube map at the direction.\\n\\\n */\\n\\\nvec3 czm_sampleOctahedralProjection(sampler2D projectedMap, vec2 textureSize, vec3 direction, float lod, float maxLod) {\\n\\\n    float currentLod = floor(lod + 0.5);\\n\\\n    float nextLod = min(currentLod + 1.0, maxLod);\\n\\\n\\n\\\n    vec3 colorCurrentLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, currentLod);\\n\\\n    vec3 colorNextLod = czm_sampleOctahedralProjectionWithFiltering(projectedMap, textureSize, direction, nextLod);\\n\\\n\\n\\\n    return mix(colorNextLod, colorCurrentLod, nextLod - lod);\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"c1de9f45b2d28b948c733538ef70a1b1","cacheData":{"env":{}}}