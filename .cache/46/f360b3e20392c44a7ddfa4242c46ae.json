{"id":"node_modules/cesium/Source/Shaders/CloudCollectionFS.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"uniform sampler2D u_noiseTexture;\\n\\\nuniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nvarying vec2 v_offset;\\n\\\nvarying vec3 v_maximumSize;\\n\\\nvarying float v_slice;\\n\\\nvarying float v_brightness;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nfloat textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\nfloat noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\nfloat inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n\\n\\\nfloat textureSliceWidthSquared = textureSliceWidth * textureSliceWidth;\\n\\\nvec2 inverseNoiseTextureDimensions = vec2(noiseTextureRows / textureSliceWidthSquared,\\n\\\n                                          inverseNoiseTextureRows / textureSliceWidth);\\n\\\n\\n\\\nvec2 voxelToUV(vec3 voxelIndex) {\\n\\\n    vec3 wrappedIndex = wrapVec(voxelIndex, textureSliceWidth);\\n\\\n    float column = mod(wrappedIndex.z, textureSliceWidth * inverseNoiseTextureRows);\\n\\\n    float row = floor(wrappedIndex.z / textureSliceWidth * noiseTextureRows);\\n\\\n\\n\\\n    float xPixelCoord = wrappedIndex.x + column * textureSliceWidth;\\n\\\n    float yPixelCoord = wrappedIndex.y + row * textureSliceWidth;\\n\\\n    return vec2(xPixelCoord, yPixelCoord) * inverseNoiseTextureDimensions;\\n\\\n}\\n\\\n\\n\\\n// Interpolate a voxel with its neighbor (along the positive X-axis)\\n\\\nvec4 lerpSamplesX(vec3 voxelIndex, float x) {\\n\\\n    vec2 uv0 = voxelToUV(voxelIndex);\\n\\\n    vec2 uv1 = voxelToUV(voxelIndex + vec3(1.0, 0.0, 0.0));\\n\\\n    vec4 sample0 = texture2D(u_noiseTexture, uv0);\\n\\\n    vec4 sample1 = texture2D(u_noiseTexture, uv1);\\n\\\n    return mix(sample0, sample1, x);\\n\\\n}\\n\\\n\\n\\\nvec4 sampleNoiseTexture(vec3 position) {\\n\\\n    vec3 recenteredPos = position + vec3(textureSliceWidth / 2.0);\\n\\\n    vec3 lerpValue = fract(recenteredPos);\\n\\\n    vec3 voxelIndex = floor(recenteredPos);\\n\\\n\\n\\\n    vec4 xLerp00 = lerpSamplesX(voxelIndex, lerpValue.x);\\n\\\n    vec4 xLerp01 = lerpSamplesX(voxelIndex + vec3(0.0, 0.0, 1.0), lerpValue.x);\\n\\\n    vec4 xLerp10 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 0.0), lerpValue.x);\\n\\\n    vec4 xLerp11 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 1.0), lerpValue.x);\\n\\\n\\n\\\n    vec4 yLerp0 = mix(xLerp00, xLerp10, lerpValue.y);\\n\\\n    vec4 yLerp1 = mix(xLerp01, xLerp11, lerpValue.y);\\n\\\n    return mix(yLerp0, yLerp1, lerpValue.z);\\n\\\n}\\n\\\n\\n\\\n// Intersection with a unit sphere with radius 0.5 at center (0, 0, 0).\\n\\\nbool intersectSphere(vec3 origin, vec3 dir, float slice,\\n\\\n                     out vec3 point, out vec3 normal) {\\n\\\n    float A = dot(dir, dir);\\n\\\n    float B = dot(origin, dir);\\n\\\n    float C = dot(origin, origin) - 0.25;\\n\\\n    float discriminant = (B * B) - (A * C);\\n\\\n    if(discriminant < 0.0) {\\n\\\n        return false;\\n\\\n    }\\n\\\n    float root = sqrt(discriminant);\\n\\\n    float t = (-B - root) / A;\\n\\\n    if(t < 0.0) {\\n\\\n        t = (-B + root) / A;\\n\\\n    }\\n\\\n    point = origin + t * dir;\\n\\\n\\n\\\n    if(slice >= 0.0) {\\n\\\n        point.z = (slice / 2.0) - 0.5;\\n\\\n        if(length(point) > 0.5) {\\n\\\n            return false;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    normal = normalize(point);\\n\\\n    point -= czm_epsilon2 * normal;\\n\\\n    return true;\\n\\\n}\\n\\\n\\n\\\n// Transforms the ray origin and direction into unit sphere space,\\n\\\n// then transforms the result back into the ellipsoid's space.\\n\\\nbool intersectEllipsoid(vec3 origin, vec3 dir, vec3 center, vec3 scale, float slice,\\n\\\n                        out vec3 point, out vec3 normal) {\\n\\\n    if(scale.x <= 0.01 || scale.y < 0.01 || scale.z < 0.01) {\\n\\\n        return false;\\n\\\n    }\\n\\\n\\n\\\n    vec3 o = (origin - center) / scale;\\n\\\n    vec3 d = dir / scale;\\n\\\n    vec3 p, n;\\n\\\n    bool intersected = intersectSphere(o, d, slice, p, n);\\n\\\n    if(intersected) {\\n\\\n        point = (p * scale) + center;\\n\\\n        normal = n;\\n\\\n    }\\n\\\n    return intersected;\\n\\\n}\\n\\\n\\n\\\n// Assume that if phase shift is being called for octave i,\\n\\\n// the frequency is of i - 1. This saves us from doing extra\\n\\\n// division / multiplication operations.\\n\\\nvec2 phaseShift2D(vec2 p, vec2 freq) {\\n\\\n    return (czm_pi / 2.0) * sin(freq.yx * p.yx);\\n\\\n}\\n\\\n\\n\\\nvec2 phaseShift3D(vec3 p, vec2 freq) {\\n\\\n    return phaseShift2D(p.xy, freq) + czm_pi * vec2(sin(freq.x * p.z));\\n\\\n}\\n\\\n\\n\\\n// The cloud texture function derived from Gardner's 1985 paper,\\n\\\n// \\\"Visual Simulation of Clouds.\\\"\\n\\\n// https://www.cs.drexel.edu/~david/Classes/Papers/p297-gardner.pdf\\n\\\nconst float T0    = 0.6;  // contrast of the texture pattern\\n\\\nconst float k     = 0.1;  // computed to produce a maximum value of 1\\n\\\nconst float C0    = 0.8;  // coefficient\\n\\\nconst float FX0   = 0.6;  // frequency X\\n\\\nconst float FY0   = 0.6;  // frequency Y\\n\\\nconst int octaves = 5;\\n\\\n\\n\\\nfloat T(vec3 point) {\\n\\\n    vec2 sum = vec2(0.0);\\n\\\n    float Ci = C0;\\n\\\n    vec2 FXY = vec2(FX0, FY0);\\n\\\n    vec2 PXY = vec2(0.0);\\n\\\n    for(int i = 1; i <= octaves; i++) {\\n\\\n        PXY = phaseShift3D(point, FXY);\\n\\\n        Ci *= 0.707;\\n\\\n        FXY *= 2.0;\\n\\\n        vec2 sinTerm = sin(FXY * point.xy + PXY);\\n\\\n        sum += Ci * sinTerm + vec2(T0);\\n\\\n    }\\n\\\n    return k * sum.x * sum.y;\\n\\\n}\\n\\\n\\n\\\nconst float a = 0.5;  // fraction of surface reflection due to ambient or scattered light,\\n\\\nconst float t = 0.4;  // fraction of texture shading\\n\\\nconst float s = 0.25; // fraction of specular reflection\\n\\\n\\n\\\nfloat I(float Id, float Is, float It) {\\n\\\n    return (1.0 - a) * ((1.0 - t) * ((1.0 - s) * Id + s * Is) + t * It) + a;\\n\\\n}\\n\\\n\\n\\\nconst vec3 lightDir = normalize(vec3(0.2, -1.0, 0.7));\\n\\\n\\n\\\nvec4 drawCloud(vec3 rayOrigin, vec3 rayDir, vec3 cloudCenter, vec3 cloudScale, float cloudSlice,\\n\\\n               float brightness) {\\n\\\n    vec3 cloudPoint, cloudNormal;\\n\\\n    if(!intersectEllipsoid(rayOrigin, rayDir, cloudCenter, cloudScale, cloudSlice,\\n\\\n                            cloudPoint, cloudNormal)) {\\n\\\n        return vec4(0.0);\\n\\\n    }\\n\\\n\\n\\\n    float Id = clamp(dot(cloudNormal, -lightDir), 0.0, 1.0);  // diffuse reflection\\n\\\n    float Is = max(pow(dot(-lightDir, -rayDir), 2.0), 0.0);   // specular reflection\\n\\\n    float It = T(cloudPoint);                                 // texture function\\n\\\n    float intensity = I(Id, Is, It);\\n\\\n    vec3 color = intensity * clamp(brightness, 0.1, 1.0) * vec3(1.0);\\n\\\n\\n\\\n    vec4 noise = sampleNoiseTexture(u_noiseDetail * cloudPoint);\\n\\\n    float W = noise.x;\\n\\\n    float W2 = noise.y;\\n\\\n    float W3 = noise.z;\\n\\\n\\n\\\n    // The dot product between the cloud's normal and the ray's direction is greatest\\n\\\n    // in the center of the ellipsoid's surface. It decreases towards the edge.\\n\\\n    // Thus, it is used to blur the areas leading to the edges of the ellipsoid,\\n\\\n    // so that no harsh lines appear.\\n\\\n\\n\\\n    // The first (and biggest) layer of worley noise is then subtracted from this.\\n\\\n    // The final result is scaled up so that the base cloud is not too translucent.\\n\\\n    float ndDot = clamp(dot(cloudNormal, -rayDir), 0.0, 1.0);\\n\\\n    float TR = pow(ndDot, 3.0) - W; // translucency\\n\\\n    TR *= 1.3;\\n\\\n\\n\\\n    // Subtracting the second and third layers of worley noise is more complicated.\\n\\\n    // If these layers of noise were simply subtracted from the current translucency,\\n\\\n    // the shape derived from the first layer of noise would be completely deleted.\\n\\\n    // The erosion of this noise should thus be constricted to the edges of the cloud.\\n\\\n    // However, because the edges of the ellipsoid were already blurred away, mapping\\n\\\n    // the noise to (1.0 - ndDot) will have no impact on most of the cloud's appearance.\\n\\\n    // The value of (0.5 - ndDot) provides the best compromise.\\n\\\n    float minusDot = 0.5 - ndDot;\\n\\\n\\n\\\n    // Even with the previous calculation, subtracting the second layer of wnoise\\n\\\n    // erode too much of the cloud. The addition of it, however, will detailed\\n\\\n    // volume to the cloud. As long as the noise is only added and not subtracted,\\n\\\n    // the results are aesthetically pleasing.\\n\\\n\\n\\\n    // The minusDot product is mapped in a way that it is larger at the edges of\\n\\\n    // the ellipsoid, so a subtraction and min operation are used instead of\\n\\\n    // an addition and max one.\\n\\\n    TR -= min(minusDot * W2, 0.0);\\n\\\n\\n\\\n    // The third level of worley noise is subtracted from the result, with some\\n\\\n    // modifications. First, a scalar is added to minusDot so that the noise\\n\\\n    // starts affecting the shape farther away from the center of the ellipsoid's\\n\\\n    // surface. Then, it is scaled down so its impact is not too intense.\\n\\\n    TR -= 0.8 * (minusDot + 0.25) * W3;\\n\\\n\\n\\\n    // The texture function's shading does not correlate with the shape of the cloud\\n\\\n    // produced by the layers of noise, so an extra shading scalar is calculated.\\n\\\n    // The darkest areas of the cloud are assigned to be where the noise erodes\\n\\\n    // the cloud the most. This is then interpolated based on the translucency\\n\\\n    // and the diffuse shading term of that point in the cloud.\\n\\\n    float shading = mix(1.0 - 0.8 * W * W, 1.0, Id * TR);\\n\\\n\\n\\\n    // To avoid values that are too dark, this scalar is increased by a small amount\\n\\\n    // and clamped so it never goes to zero.\\n\\\n    shading = clamp(shading + 0.2, 0.3, 1.0);\\n\\\n\\n\\\n    // Finally, the contrast of the cloud's color is increased.\\n\\\n    vec3 finalColor = mix(vec3(0.5), shading * color, 1.15);\\n\\\n    return vec4(finalColor, clamp(TR, 0.0, 1.0));\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n#ifdef DEBUG_BILLBOARDS\\n\\\n    gl_FragColor = vec4(0.0, 0.5, 0.5, 1.0);\\n\\\n#endif\\n\\\n    // To avoid calculations with high values,\\n\\\n    // we raycast from an arbitrarily smaller space.\\n\\\n    vec2 coordinate = v_maximumSize.xy * v_offset;\\n\\\n\\n\\\n    vec3 ellipsoidScale = 0.82 * v_maximumSize;\\n\\\n    vec3 ellipsoidCenter = vec3(0.0);\\n\\\n\\n\\\n    float zOffset = max(ellipsoidScale.z - 10.0, 0.0);\\n\\\n    vec3 eye = vec3(0, 0, -10.0 - zOffset);\\n\\\n    vec3 rayDir = normalize(vec3(coordinate, 1.0) - eye);\\n\\\n    vec3 rayOrigin = eye;\\n\\\n#ifdef DEBUG_ELLIPSOIDS\\n\\\n    vec3 point, normal;\\n\\\n    if(intersectEllipsoid(rayOrigin, rayDir, ellipsoidCenter, ellipsoidScale, v_slice,\\n\\\n                          point, normal)) {\\n\\\n        gl_FragColor = v_brightness * vec4(1.0);\\n\\\n    }\\n\\\n#else\\n\\\n#ifndef DEBUG_BILLBOARDS\\n\\\n    vec4 cloud = drawCloud(rayOrigin, rayDir,\\n\\\n                           ellipsoidCenter, ellipsoidScale, v_slice, v_brightness);\\n\\\n    if(cloud.w < 0.01) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    gl_FragColor = cloud;\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/CloudCollectionFS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/CloudCollectionFS.js","original":{"line":2,"column":15}}],"sources":{"node_modules/cesium/Source/Shaders/CloudCollectionFS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"uniform sampler2D u_noiseTexture;\\n\\\nuniform vec3 u_noiseTextureDimensions;\\n\\\nuniform float u_noiseDetail;\\n\\\nvarying vec2 v_offset;\\n\\\nvarying vec3 v_maximumSize;\\n\\\nvarying float v_slice;\\n\\\nvarying float v_brightness;\\n\\\n\\n\\\nfloat wrap(float value, float rangeLength) {\\n\\\n    if(value < 0.0) {\\n\\\n        float absValue = abs(value);\\n\\\n        float modValue = mod(absValue, rangeLength);\\n\\\n        return mod(rangeLength - modValue, rangeLength);\\n\\\n    }\\n\\\n    return mod(value, rangeLength);\\n\\\n}\\n\\\n\\n\\\nvec3 wrapVec(vec3 value, float rangeLength) {\\n\\\n    return vec3(wrap(value.x, rangeLength),\\n\\\n                wrap(value.y, rangeLength),\\n\\\n                wrap(value.z, rangeLength));\\n\\\n}\\n\\\n\\n\\\nfloat textureSliceWidth = u_noiseTextureDimensions.x;\\n\\\nfloat noiseTextureRows = u_noiseTextureDimensions.y;\\n\\\nfloat inverseNoiseTextureRows = u_noiseTextureDimensions.z;\\n\\\n\\n\\\nfloat textureSliceWidthSquared = textureSliceWidth * textureSliceWidth;\\n\\\nvec2 inverseNoiseTextureDimensions = vec2(noiseTextureRows / textureSliceWidthSquared,\\n\\\n                                          inverseNoiseTextureRows / textureSliceWidth);\\n\\\n\\n\\\nvec2 voxelToUV(vec3 voxelIndex) {\\n\\\n    vec3 wrappedIndex = wrapVec(voxelIndex, textureSliceWidth);\\n\\\n    float column = mod(wrappedIndex.z, textureSliceWidth * inverseNoiseTextureRows);\\n\\\n    float row = floor(wrappedIndex.z / textureSliceWidth * noiseTextureRows);\\n\\\n\\n\\\n    float xPixelCoord = wrappedIndex.x + column * textureSliceWidth;\\n\\\n    float yPixelCoord = wrappedIndex.y + row * textureSliceWidth;\\n\\\n    return vec2(xPixelCoord, yPixelCoord) * inverseNoiseTextureDimensions;\\n\\\n}\\n\\\n\\n\\\n// Interpolate a voxel with its neighbor (along the positive X-axis)\\n\\\nvec4 lerpSamplesX(vec3 voxelIndex, float x) {\\n\\\n    vec2 uv0 = voxelToUV(voxelIndex);\\n\\\n    vec2 uv1 = voxelToUV(voxelIndex + vec3(1.0, 0.0, 0.0));\\n\\\n    vec4 sample0 = texture2D(u_noiseTexture, uv0);\\n\\\n    vec4 sample1 = texture2D(u_noiseTexture, uv1);\\n\\\n    return mix(sample0, sample1, x);\\n\\\n}\\n\\\n\\n\\\nvec4 sampleNoiseTexture(vec3 position) {\\n\\\n    vec3 recenteredPos = position + vec3(textureSliceWidth / 2.0);\\n\\\n    vec3 lerpValue = fract(recenteredPos);\\n\\\n    vec3 voxelIndex = floor(recenteredPos);\\n\\\n\\n\\\n    vec4 xLerp00 = lerpSamplesX(voxelIndex, lerpValue.x);\\n\\\n    vec4 xLerp01 = lerpSamplesX(voxelIndex + vec3(0.0, 0.0, 1.0), lerpValue.x);\\n\\\n    vec4 xLerp10 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 0.0), lerpValue.x);\\n\\\n    vec4 xLerp11 = lerpSamplesX(voxelIndex + vec3(0.0, 1.0, 1.0), lerpValue.x);\\n\\\n\\n\\\n    vec4 yLerp0 = mix(xLerp00, xLerp10, lerpValue.y);\\n\\\n    vec4 yLerp1 = mix(xLerp01, xLerp11, lerpValue.y);\\n\\\n    return mix(yLerp0, yLerp1, lerpValue.z);\\n\\\n}\\n\\\n\\n\\\n// Intersection with a unit sphere with radius 0.5 at center (0, 0, 0).\\n\\\nbool intersectSphere(vec3 origin, vec3 dir, float slice,\\n\\\n                     out vec3 point, out vec3 normal) {\\n\\\n    float A = dot(dir, dir);\\n\\\n    float B = dot(origin, dir);\\n\\\n    float C = dot(origin, origin) - 0.25;\\n\\\n    float discriminant = (B * B) - (A * C);\\n\\\n    if(discriminant < 0.0) {\\n\\\n        return false;\\n\\\n    }\\n\\\n    float root = sqrt(discriminant);\\n\\\n    float t = (-B - root) / A;\\n\\\n    if(t < 0.0) {\\n\\\n        t = (-B + root) / A;\\n\\\n    }\\n\\\n    point = origin + t * dir;\\n\\\n\\n\\\n    if(slice >= 0.0) {\\n\\\n        point.z = (slice / 2.0) - 0.5;\\n\\\n        if(length(point) > 0.5) {\\n\\\n            return false;\\n\\\n        }\\n\\\n    }\\n\\\n\\n\\\n    normal = normalize(point);\\n\\\n    point -= czm_epsilon2 * normal;\\n\\\n    return true;\\n\\\n}\\n\\\n\\n\\\n// Transforms the ray origin and direction into unit sphere space,\\n\\\n// then transforms the result back into the ellipsoid's space.\\n\\\nbool intersectEllipsoid(vec3 origin, vec3 dir, vec3 center, vec3 scale, float slice,\\n\\\n                        out vec3 point, out vec3 normal) {\\n\\\n    if(scale.x <= 0.01 || scale.y < 0.01 || scale.z < 0.01) {\\n\\\n        return false;\\n\\\n    }\\n\\\n\\n\\\n    vec3 o = (origin - center) / scale;\\n\\\n    vec3 d = dir / scale;\\n\\\n    vec3 p, n;\\n\\\n    bool intersected = intersectSphere(o, d, slice, p, n);\\n\\\n    if(intersected) {\\n\\\n        point = (p * scale) + center;\\n\\\n        normal = n;\\n\\\n    }\\n\\\n    return intersected;\\n\\\n}\\n\\\n\\n\\\n// Assume that if phase shift is being called for octave i,\\n\\\n// the frequency is of i - 1. This saves us from doing extra\\n\\\n// division / multiplication operations.\\n\\\nvec2 phaseShift2D(vec2 p, vec2 freq) {\\n\\\n    return (czm_pi / 2.0) * sin(freq.yx * p.yx);\\n\\\n}\\n\\\n\\n\\\nvec2 phaseShift3D(vec3 p, vec2 freq) {\\n\\\n    return phaseShift2D(p.xy, freq) + czm_pi * vec2(sin(freq.x * p.z));\\n\\\n}\\n\\\n\\n\\\n// The cloud texture function derived from Gardner's 1985 paper,\\n\\\n// \\\"Visual Simulation of Clouds.\\\"\\n\\\n// https://www.cs.drexel.edu/~david/Classes/Papers/p297-gardner.pdf\\n\\\nconst float T0    = 0.6;  // contrast of the texture pattern\\n\\\nconst float k     = 0.1;  // computed to produce a maximum value of 1\\n\\\nconst float C0    = 0.8;  // coefficient\\n\\\nconst float FX0   = 0.6;  // frequency X\\n\\\nconst float FY0   = 0.6;  // frequency Y\\n\\\nconst int octaves = 5;\\n\\\n\\n\\\nfloat T(vec3 point) {\\n\\\n    vec2 sum = vec2(0.0);\\n\\\n    float Ci = C0;\\n\\\n    vec2 FXY = vec2(FX0, FY0);\\n\\\n    vec2 PXY = vec2(0.0);\\n\\\n    for(int i = 1; i <= octaves; i++) {\\n\\\n        PXY = phaseShift3D(point, FXY);\\n\\\n        Ci *= 0.707;\\n\\\n        FXY *= 2.0;\\n\\\n        vec2 sinTerm = sin(FXY * point.xy + PXY);\\n\\\n        sum += Ci * sinTerm + vec2(T0);\\n\\\n    }\\n\\\n    return k * sum.x * sum.y;\\n\\\n}\\n\\\n\\n\\\nconst float a = 0.5;  // fraction of surface reflection due to ambient or scattered light,\\n\\\nconst float t = 0.4;  // fraction of texture shading\\n\\\nconst float s = 0.25; // fraction of specular reflection\\n\\\n\\n\\\nfloat I(float Id, float Is, float It) {\\n\\\n    return (1.0 - a) * ((1.0 - t) * ((1.0 - s) * Id + s * Is) + t * It) + a;\\n\\\n}\\n\\\n\\n\\\nconst vec3 lightDir = normalize(vec3(0.2, -1.0, 0.7));\\n\\\n\\n\\\nvec4 drawCloud(vec3 rayOrigin, vec3 rayDir, vec3 cloudCenter, vec3 cloudScale, float cloudSlice,\\n\\\n               float brightness) {\\n\\\n    vec3 cloudPoint, cloudNormal;\\n\\\n    if(!intersectEllipsoid(rayOrigin, rayDir, cloudCenter, cloudScale, cloudSlice,\\n\\\n                            cloudPoint, cloudNormal)) {\\n\\\n        return vec4(0.0);\\n\\\n    }\\n\\\n\\n\\\n    float Id = clamp(dot(cloudNormal, -lightDir), 0.0, 1.0);  // diffuse reflection\\n\\\n    float Is = max(pow(dot(-lightDir, -rayDir), 2.0), 0.0);   // specular reflection\\n\\\n    float It = T(cloudPoint);                                 // texture function\\n\\\n    float intensity = I(Id, Is, It);\\n\\\n    vec3 color = intensity * clamp(brightness, 0.1, 1.0) * vec3(1.0);\\n\\\n\\n\\\n    vec4 noise = sampleNoiseTexture(u_noiseDetail * cloudPoint);\\n\\\n    float W = noise.x;\\n\\\n    float W2 = noise.y;\\n\\\n    float W3 = noise.z;\\n\\\n\\n\\\n    // The dot product between the cloud's normal and the ray's direction is greatest\\n\\\n    // in the center of the ellipsoid's surface. It decreases towards the edge.\\n\\\n    // Thus, it is used to blur the areas leading to the edges of the ellipsoid,\\n\\\n    // so that no harsh lines appear.\\n\\\n\\n\\\n    // The first (and biggest) layer of worley noise is then subtracted from this.\\n\\\n    // The final result is scaled up so that the base cloud is not too translucent.\\n\\\n    float ndDot = clamp(dot(cloudNormal, -rayDir), 0.0, 1.0);\\n\\\n    float TR = pow(ndDot, 3.0) - W; // translucency\\n\\\n    TR *= 1.3;\\n\\\n\\n\\\n    // Subtracting the second and third layers of worley noise is more complicated.\\n\\\n    // If these layers of noise were simply subtracted from the current translucency,\\n\\\n    // the shape derived from the first layer of noise would be completely deleted.\\n\\\n    // The erosion of this noise should thus be constricted to the edges of the cloud.\\n\\\n    // However, because the edges of the ellipsoid were already blurred away, mapping\\n\\\n    // the noise to (1.0 - ndDot) will have no impact on most of the cloud's appearance.\\n\\\n    // The value of (0.5 - ndDot) provides the best compromise.\\n\\\n    float minusDot = 0.5 - ndDot;\\n\\\n\\n\\\n    // Even with the previous calculation, subtracting the second layer of wnoise\\n\\\n    // erode too much of the cloud. The addition of it, however, will detailed\\n\\\n    // volume to the cloud. As long as the noise is only added and not subtracted,\\n\\\n    // the results are aesthetically pleasing.\\n\\\n\\n\\\n    // The minusDot product is mapped in a way that it is larger at the edges of\\n\\\n    // the ellipsoid, so a subtraction and min operation are used instead of\\n\\\n    // an addition and max one.\\n\\\n    TR -= min(minusDot * W2, 0.0);\\n\\\n\\n\\\n    // The third level of worley noise is subtracted from the result, with some\\n\\\n    // modifications. First, a scalar is added to minusDot so that the noise\\n\\\n    // starts affecting the shape farther away from the center of the ellipsoid's\\n\\\n    // surface. Then, it is scaled down so its impact is not too intense.\\n\\\n    TR -= 0.8 * (minusDot + 0.25) * W3;\\n\\\n\\n\\\n    // The texture function's shading does not correlate with the shape of the cloud\\n\\\n    // produced by the layers of noise, so an extra shading scalar is calculated.\\n\\\n    // The darkest areas of the cloud are assigned to be where the noise erodes\\n\\\n    // the cloud the most. This is then interpolated based on the translucency\\n\\\n    // and the diffuse shading term of that point in the cloud.\\n\\\n    float shading = mix(1.0 - 0.8 * W * W, 1.0, Id * TR);\\n\\\n\\n\\\n    // To avoid values that are too dark, this scalar is increased by a small amount\\n\\\n    // and clamped so it never goes to zero.\\n\\\n    shading = clamp(shading + 0.2, 0.3, 1.0);\\n\\\n\\n\\\n    // Finally, the contrast of the cloud's color is increased.\\n\\\n    vec3 finalColor = mix(vec3(0.5), shading * color, 1.15);\\n\\\n    return vec4(finalColor, clamp(TR, 0.0, 1.0));\\n\\\n}\\n\\\n\\n\\\nvoid main() {\\n\\\n#ifdef DEBUG_BILLBOARDS\\n\\\n    gl_FragColor = vec4(0.0, 0.5, 0.5, 1.0);\\n\\\n#endif\\n\\\n    // To avoid calculations with high values,\\n\\\n    // we raycast from an arbitrarily smaller space.\\n\\\n    vec2 coordinate = v_maximumSize.xy * v_offset;\\n\\\n\\n\\\n    vec3 ellipsoidScale = 0.82 * v_maximumSize;\\n\\\n    vec3 ellipsoidCenter = vec3(0.0);\\n\\\n\\n\\\n    float zOffset = max(ellipsoidScale.z - 10.0, 0.0);\\n\\\n    vec3 eye = vec3(0, 0, -10.0 - zOffset);\\n\\\n    vec3 rayDir = normalize(vec3(coordinate, 1.0) - eye);\\n\\\n    vec3 rayOrigin = eye;\\n\\\n#ifdef DEBUG_ELLIPSOIDS\\n\\\n    vec3 point, normal;\\n\\\n    if(intersectEllipsoid(rayOrigin, rayDir, ellipsoidCenter, ellipsoidScale, v_slice,\\n\\\n                          point, normal)) {\\n\\\n        gl_FragColor = v_brightness * vec4(1.0);\\n\\\n    }\\n\\\n#else\\n\\\n#ifndef DEBUG_BILLBOARDS\\n\\\n    vec4 cloud = drawCloud(rayOrigin, rayDir,\\n\\\n                           ellipsoidCenter, ellipsoidScale, v_slice, v_brightness);\\n\\\n    if(cloud.w < 0.01) {\\n\\\n        discard;\\n\\\n    }\\n\\\n    gl_FragColor = cloud;\\n\\\n#endif\\n\\\n#endif\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"d08b8ec9480237a7c294ab25853159f8","cacheData":{"env":{}}}