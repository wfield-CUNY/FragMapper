{"id":"node_modules/cesium/Source/Scene/hasExtension.js","dependencies":[{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\package.json","includedInParent":true,"mtime":1640105766009},{"name":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1640105765416},{"name":"../Core/defined.js","loc":{"line":1,"column":20},"parent":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\Source\\Scene\\hasExtension.js","resolved":"D:\\Users\\Will\\Documents\\CUNY\\Research\\FragMapper\\node_modules\\cesium\\Source\\Core\\defined.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hasExtension;\n\nvar _defined = _interopRequireDefault(require(\"../Core/defined.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Check if a specific extension is present on a JSON object. This can be used\n * for either 3D Tiles extensions or glTF extensions\n * @param {Object} json The JSON object\n * @param {String} extensionName The name of the extension, e.g. '3DTILES_implicit_tiling'\n * @returns {Boolean} True if the extension is present\n * @private\n */\nfunction hasExtension(json, extensionName) {\n  return (0, _defined.default)(json) && (0, _defined.default)(json.extensions) && (0, _defined.default)(json.extensions[extensionName]);\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":3,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":15}},{"name":"hasExtension","generated":{"line":20,"column":9},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":24}},{"generated":{"line":20,"column":21},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":15}},{"name":"json","generated":{"line":20,"column":22},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":37}},{"generated":{"line":20,"column":26},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":15}},{"name":"extensionName","generated":{"line":20,"column":28},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":43}},{"generated":{"line":20,"column":41},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":15}},{"generated":{"line":20,"column":43},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":11,"column":58}},{"generated":{"line":21,"column":0},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":12,"column":2}},{"generated":{"line":21,"column":9},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":13,"column":4}},{"name":"json","generated":{"line":21,"column":31},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":13,"column":12}},{"generated":{"line":21,"column":35},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":13,"column":4}},{"generated":{"line":21,"column":40},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":14,"column":4}},{"name":"json","generated":{"line":21,"column":62},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":14,"column":12}},{"generated":{"line":21,"column":66},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":14,"column":16}},{"name":"extensions","generated":{"line":21,"column":67},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":14,"column":17}},{"generated":{"line":21,"column":77},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":14,"column":4}},{"generated":{"line":21,"column":78},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":13,"column":4}},{"generated":{"line":21,"column":82},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":4}},{"name":"json","generated":{"line":21,"column":104},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":12}},{"generated":{"line":21,"column":108},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":16}},{"name":"extensions","generated":{"line":21,"column":109},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":17}},{"generated":{"line":21,"column":119},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":12}},{"name":"extensionName","generated":{"line":21,"column":120},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":28}},{"generated":{"line":21,"column":133},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":12}},{"generated":{"line":21,"column":134},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":15,"column":4}},{"generated":{"line":21,"column":135},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":12,"column":2}},{"generated":{"line":22,"column":0},"source":"node_modules/cesium/Source/Scene/hasExtension.js","original":{"line":17,"column":1}}],"sources":{"node_modules/cesium/Source/Scene/hasExtension.js":"import defined from \"../Core/defined.js\";\n\n/**\n * Check if a specific extension is present on a JSON object. This can be used\n * for either 3D Tiles extensions or glTF extensions\n * @param {Object} json The JSON object\n * @param {String} extensionName The name of the extension, e.g. '3DTILES_implicit_tiling'\n * @returns {Boolean} True if the extension is present\n * @private\n */\nexport default function hasExtension(json, extensionName) {\n  return (\n    defined(json) &&\n    defined(json.extensions) &&\n    defined(json.extensions[extensionName])\n  );\n}\n"},"lineCount":null}},"error":null,"hash":"34f5409c728ef0a2b33e22b50bda2ecc","cacheData":{"env":{}}}